/*** Autogenerated by WIDL 8.0.1 from ../include/d2d1_3.idl - Do not edit ***/

#ifdef _WIN32
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif
#include <rpc.h>
#include <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __d2d1_3_h__
#define __d2d1_3_h__

#ifndef __WIDL_INLINE
#if defined(__cplusplus) || defined(_MSC_VER)
#define __WIDL_INLINE inline
#elif defined(__GNUC__)
#define __WIDL_INLINE __inline__
#endif
#endif

/* Forward declarations */

#ifndef __ID2D1InkStyle_FWD_DEFINED__
#define __ID2D1InkStyle_FWD_DEFINED__
typedef interface ID2D1InkStyle ID2D1InkStyle;
#ifdef __cplusplus
interface ID2D1InkStyle;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1Ink_FWD_DEFINED__
#define __ID2D1Ink_FWD_DEFINED__
typedef interface ID2D1Ink ID2D1Ink;
#ifdef __cplusplus
interface ID2D1Ink;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1GradientMesh_FWD_DEFINED__
#define __ID2D1GradientMesh_FWD_DEFINED__
typedef interface ID2D1GradientMesh ID2D1GradientMesh;
#ifdef __cplusplus
interface ID2D1GradientMesh;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1ImageSource_FWD_DEFINED__
#define __ID2D1ImageSource_FWD_DEFINED__
typedef interface ID2D1ImageSource ID2D1ImageSource;
#ifdef __cplusplus
interface ID2D1ImageSource;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1ImageSourceFromWic_FWD_DEFINED__
#define __ID2D1ImageSourceFromWic_FWD_DEFINED__
typedef interface ID2D1ImageSourceFromWic ID2D1ImageSourceFromWic;
#ifdef __cplusplus
interface ID2D1ImageSourceFromWic;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1TransformedImageSource_FWD_DEFINED__
#define __ID2D1TransformedImageSource_FWD_DEFINED__
typedef interface ID2D1TransformedImageSource ID2D1TransformedImageSource;
#ifdef __cplusplus
interface ID2D1TransformedImageSource;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1LookupTable3D_FWD_DEFINED__
#define __ID2D1LookupTable3D_FWD_DEFINED__
typedef interface ID2D1LookupTable3D ID2D1LookupTable3D;
#ifdef __cplusplus
interface ID2D1LookupTable3D;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1DeviceContext2_FWD_DEFINED__
#define __ID2D1DeviceContext2_FWD_DEFINED__
typedef interface ID2D1DeviceContext2 ID2D1DeviceContext2;
#ifdef __cplusplus
interface ID2D1DeviceContext2;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1Device2_FWD_DEFINED__
#define __ID2D1Device2_FWD_DEFINED__
typedef interface ID2D1Device2 ID2D1Device2;
#ifdef __cplusplus
interface ID2D1Device2;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1Factory3_FWD_DEFINED__
#define __ID2D1Factory3_FWD_DEFINED__
typedef interface ID2D1Factory3 ID2D1Factory3;
#ifdef __cplusplus
interface ID2D1Factory3;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1CommandSink2_FWD_DEFINED__
#define __ID2D1CommandSink2_FWD_DEFINED__
typedef interface ID2D1CommandSink2 ID2D1CommandSink2;
#ifdef __cplusplus
interface ID2D1CommandSink2;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1CommandSink3_FWD_DEFINED__
#define __ID2D1CommandSink3_FWD_DEFINED__
typedef interface ID2D1CommandSink3 ID2D1CommandSink3;
#ifdef __cplusplus
interface ID2D1CommandSink3;
#endif /* __cplusplus */
#endif

#ifndef __ID2D1CommandSink4_FWD_DEFINED__
#define __ID2D1CommandSink4_FWD_DEFINED__
typedef interface ID2D1CommandSink4 ID2D1CommandSink4;
#ifdef __cplusplus
interface ID2D1CommandSink4;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <d2d1_2.h>
#include <d2d1effects_2.h>

#ifdef __cplusplus
extern "C" {
#endif

#ifndef __ID2D1SpriteBatch_FWD_DEFINED__
#define __ID2D1SpriteBatch_FWD_DEFINED__
typedef interface ID2D1SpriteBatch ID2D1SpriteBatch;
#ifdef __cplusplus
interface ID2D1SpriteBatch;
#endif /* __cplusplus */
#endif

typedef enum D2D1_INK_NIB_SHAPE {
    D2D1_INK_NIB_SHAPE_ROUND = 0x0,
    D2D1_INK_NIB_SHAPE_SQUARE = 0x1,
    D2D1_INK_NIB_SHAPE_FORCE_DWORD = 0xffffffff
} D2D1_INK_NIB_SHAPE;
typedef enum D2D1_PATCH_EDGE_MODE {
    D2D1_PATCH_EDGE_MODE_ALIASED = 0x0,
    D2D1_PATCH_EDGE_MODE_ANTIALIASED = 0x1,
    D2D1_PATCH_EDGE_MODE_ALIASED_INFLATED = 0x2,
    D2D1_PATCH_EDGE_MODE_FORCE_DWORD = 0xffffffff
} D2D1_PATCH_EDGE_MODE;
typedef enum D2D1_ORIENTATION {
    D2D1_ORIENTATION_DEFAULT = 0x1,
    D2D1_ORIENTATION_FLIP_HORIZONTAL = 0x2,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180 = 0x3,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE180_FLIP_HORIZONTAL = 0x4,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90_FLIP_HORIZONTAL = 0x5,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270 = 0x6,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE270_FLIP_HORIZONTAL = 0x7,
    D2D1_ORIENTATION_ROTATE_CLOCKWISE90 = 0x8,
    D2D1_ORIENTATION_FORCE_DWORD = 0xffffffff
} D2D1_ORIENTATION;
typedef enum D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS {
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_NONE = 0x0,
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_DISABLE_DPI_SCALE = 0x1,
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS_FORCE_DWORD = 0xffffffff
} D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS;
typedef enum D2D1_IMAGE_SOURCE_LOADING_OPTIONS {
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_NONE = 0x0,
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_RELEASE_SOURCE = 0x1,
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_CACHE_ON_DEMAND = 0x2,
    D2D1_IMAGE_SOURCE_LOADING_OPTIONS_FORCE_DWORD = 0xffffffff
} D2D1_IMAGE_SOURCE_LOADING_OPTIONS;
typedef enum D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS {
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_NONE = 0x0,
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_LOW_QUALITY_PRIMARY_CONVERSION = 0x1,
    D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS_FORCE_DWORD = 0xffffffff
} D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS;
typedef enum D2D1_SPRITE_OPTIONS {
    D2D1_SPRITE_OPTIONS_NONE = 0x0,
    D2D1_SPRITE_OPTIONS_CLAMP_TO_SOURCE_RECTANGLE = 0x1,
    D2D1_SPRITE_OPTIONS_FORCE_DWORD = 0xffffffff
} D2D1_SPRITE_OPTIONS;
typedef struct D2D1_INK_POINT {
    float x;
    float y;
    float radius;
} D2D1_INK_POINT;
typedef struct D2D1_INK_BEZIER_SEGMENT {
    D2D1_INK_POINT point1;
    D2D1_INK_POINT point2;
    D2D1_INK_POINT point3;
} D2D1_INK_BEZIER_SEGMENT;
typedef struct D2D1_INK_STYLE_PROPERTIES {
    D2D1_INK_NIB_SHAPE nibShape;
    D2D1_MATRIX_3X2_F nibTransform;
} D2D1_INK_STYLE_PROPERTIES;
typedef struct D2D1_GRADIENT_MESH_PATCH {
    D2D1_POINT_2F point00;
    D2D1_POINT_2F point01;
    D2D1_POINT_2F point02;
    D2D1_POINT_2F point03;
    D2D1_POINT_2F point10;
    D2D1_POINT_2F point11;
    D2D1_POINT_2F point12;
    D2D1_POINT_2F point13;
    D2D1_POINT_2F point20;
    D2D1_POINT_2F point21;
    D2D1_POINT_2F point22;
    D2D1_POINT_2F point23;
    D2D1_POINT_2F point30;
    D2D1_POINT_2F point31;
    D2D1_POINT_2F point32;
    D2D1_POINT_2F point33;
    D2D1_COLOR_F color00;
    D2D1_COLOR_F color03;
    D2D1_COLOR_F color30;
    D2D1_COLOR_F color33;
    D2D1_PATCH_EDGE_MODE topEdgeMode;
    D2D1_PATCH_EDGE_MODE leftEdgeMode;
    D2D1_PATCH_EDGE_MODE bottomEdgeMode;
    D2D1_PATCH_EDGE_MODE rightEdgeMode;
} D2D1_GRADIENT_MESH_PATCH;
typedef struct D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES {
    D2D1_ORIENTATION orientation;
    float scaleX;
    float scaleY;
    D2D1_INTERPOLATION_MODE interpolationMode;
    D2D1_TRANSFORMED_IMAGE_SOURCE_OPTIONS options;
} D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES;
/*****************************************************************************
 * ID2D1InkStyle interface
 */
#ifndef __ID2D1InkStyle_INTERFACE_DEFINED__
#define __ID2D1InkStyle_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1InkStyle, 0xbae8b344, 0x23fc, 0x4071, 0x8c,0xb5, 0xd0,0x5d,0x6f,0x07,0x38,0x48);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("bae8b344-23fc-4071-8cb5-d05d6f073848")
ID2D1InkStyle : public ID2D1Resource
{
    virtual void STDMETHODCALLTYPE SetNibTransform(
        const D2D1_MATRIX_3X2_F *transform) = 0;

    virtual void STDMETHODCALLTYPE GetNibTransform(
        D2D1_MATRIX_3X2_F *transform) = 0;

    virtual void STDMETHODCALLTYPE SetNibShape(
        D2D1_INK_NIB_SHAPE shape) = 0;

    virtual D2D1_INK_NIB_SHAPE STDMETHODCALLTYPE GetNibShape(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1InkStyle, 0xbae8b344, 0x23fc, 0x4071, 0x8c,0xb5, 0xd0,0x5d,0x6f,0x07,0x38,0x48)
#endif
#else
typedef struct ID2D1InkStyleVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1InkStyle *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1InkStyle *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1InkStyle *This);

    /*** ID2D1Resource methods ***/
    void (STDMETHODCALLTYPE *GetFactory)(
        ID2D1InkStyle *This,
        ID2D1Factory **factory);

    /*** ID2D1InkStyle methods ***/
    void (STDMETHODCALLTYPE *SetNibTransform)(
        ID2D1InkStyle *This,
        const D2D1_MATRIX_3X2_F *transform);

    void (STDMETHODCALLTYPE *GetNibTransform)(
        ID2D1InkStyle *This,
        D2D1_MATRIX_3X2_F *transform);

    void (STDMETHODCALLTYPE *SetNibShape)(
        ID2D1InkStyle *This,
        D2D1_INK_NIB_SHAPE shape);

    D2D1_INK_NIB_SHAPE (STDMETHODCALLTYPE *GetNibShape)(
        ID2D1InkStyle *This);

    END_INTERFACE
} ID2D1InkStyleVtbl;

interface ID2D1InkStyle {
    CONST_VTBL ID2D1InkStyleVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1InkStyle_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1InkStyle_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1InkStyle_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1Resource methods ***/
#define ID2D1InkStyle_GetFactory(This,factory) (This)->lpVtbl->GetFactory(This,factory)
/*** ID2D1InkStyle methods ***/
#define ID2D1InkStyle_SetNibTransform(This,transform) (This)->lpVtbl->SetNibTransform(This,transform)
#define ID2D1InkStyle_GetNibTransform(This,transform) (This)->lpVtbl->GetNibTransform(This,transform)
#define ID2D1InkStyle_SetNibShape(This,shape) (This)->lpVtbl->SetNibShape(This,shape)
#define ID2D1InkStyle_GetNibShape(This) (This)->lpVtbl->GetNibShape(This)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1InkStyle_QueryInterface(ID2D1InkStyle* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1InkStyle_AddRef(ID2D1InkStyle* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1InkStyle_Release(ID2D1InkStyle* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1Resource methods ***/
static __WIDL_INLINE void ID2D1InkStyle_GetFactory(ID2D1InkStyle* This,ID2D1Factory **factory) {
    This->lpVtbl->GetFactory(This,factory);
}
/*** ID2D1InkStyle methods ***/
static __WIDL_INLINE void ID2D1InkStyle_SetNibTransform(ID2D1InkStyle* This,const D2D1_MATRIX_3X2_F *transform) {
    This->lpVtbl->SetNibTransform(This,transform);
}
static __WIDL_INLINE void ID2D1InkStyle_GetNibTransform(ID2D1InkStyle* This,D2D1_MATRIX_3X2_F *transform) {
    This->lpVtbl->GetNibTransform(This,transform);
}
static __WIDL_INLINE void ID2D1InkStyle_SetNibShape(ID2D1InkStyle* This,D2D1_INK_NIB_SHAPE shape) {
    This->lpVtbl->SetNibShape(This,shape);
}
static __WIDL_INLINE D2D1_INK_NIB_SHAPE ID2D1InkStyle_GetNibShape(ID2D1InkStyle* This) {
    return This->lpVtbl->GetNibShape(This);
}
#endif
#endif

#endif


#endif  /* __ID2D1InkStyle_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1Ink interface
 */
#ifndef __ID2D1Ink_INTERFACE_DEFINED__
#define __ID2D1Ink_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1Ink, 0xb499923b, 0x7029, 0x478f, 0xa8,0xb3, 0x43,0x2c,0x7c,0x5f,0x53,0x12);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b499923b-7029-478f-a8b3-432c7c5f5312")
ID2D1Ink : public ID2D1Resource
{
    virtual void STDMETHODCALLTYPE SetStartPoint(
        const D2D1_INK_POINT *start_point) = 0;

#ifdef WIDL_EXPLICIT_AGGREGATE_RETURNS
    virtual D2D1_INK_POINT* STDMETHODCALLTYPE GetStartPoint(
        D2D1_INK_POINT *__ret) = 0;
    D2D1_INK_POINT STDMETHODCALLTYPE GetStartPoint(
        )
    {
        D2D1_INK_POINT __ret;
        return *GetStartPoint(&__ret);
    }
#else
    virtual D2D1_INK_POINT STDMETHODCALLTYPE GetStartPoint(
        ) = 0;
#endif

    virtual HRESULT STDMETHODCALLTYPE AddSegments(
        const D2D1_INK_BEZIER_SEGMENT *segments,
        UINT32 segment_count) = 0;

    virtual HRESULT STDMETHODCALLTYPE RemoveSegmentsAtEnd(
        UINT32 segment_count) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetSegments(
        UINT32 start_segment,
        const D2D1_INK_BEZIER_SEGMENT *segments,
        UINT32 segment_count) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetSegmentAtEnd(
        const D2D1_INK_BEZIER_SEGMENT *segment) = 0;

    virtual UINT32 STDMETHODCALLTYPE GetSegmentCount(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetSegments(
        UINT32 start_segment,
        D2D1_INK_BEZIER_SEGMENT *segments,
        UINT32 segment_count) = 0;

    virtual HRESULT STDMETHODCALLTYPE StreamAsGeometry(
        ID2D1InkStyle *ink_style,
        const D2D1_MATRIX_3X2_F *world_transform,
        float flattening_tolerance,
        ID2D1SimplifiedGeometrySink *geometry_sink) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetBounds(
        ID2D1InkStyle *ink_style,
        const D2D1_MATRIX_3X2_F *world_transform,
        D2D1_RECT_F *bounds) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1Ink, 0xb499923b, 0x7029, 0x478f, 0xa8,0xb3, 0x43,0x2c,0x7c,0x5f,0x53,0x12)
#endif
#else
typedef struct ID2D1InkVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1Ink *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1Ink *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1Ink *This);

    /*** ID2D1Resource methods ***/
    void (STDMETHODCALLTYPE *GetFactory)(
        ID2D1Ink *This,
        ID2D1Factory **factory);

    /*** ID2D1Ink methods ***/
    void (STDMETHODCALLTYPE *SetStartPoint)(
        ID2D1Ink *This,
        const D2D1_INK_POINT *start_point);

    D2D1_INK_POINT * (STDMETHODCALLTYPE *GetStartPoint)(
        ID2D1Ink *This,
        D2D1_INK_POINT *__ret);

    HRESULT (STDMETHODCALLTYPE *AddSegments)(
        ID2D1Ink *This,
        const D2D1_INK_BEZIER_SEGMENT *segments,
        UINT32 segment_count);

    HRESULT (STDMETHODCALLTYPE *RemoveSegmentsAtEnd)(
        ID2D1Ink *This,
        UINT32 segment_count);

    HRESULT (STDMETHODCALLTYPE *SetSegments)(
        ID2D1Ink *This,
        UINT32 start_segment,
        const D2D1_INK_BEZIER_SEGMENT *segments,
        UINT32 segment_count);

    HRESULT (STDMETHODCALLTYPE *SetSegmentAtEnd)(
        ID2D1Ink *This,
        const D2D1_INK_BEZIER_SEGMENT *segment);

    UINT32 (STDMETHODCALLTYPE *GetSegmentCount)(
        ID2D1Ink *This);

    HRESULT (STDMETHODCALLTYPE *GetSegments)(
        ID2D1Ink *This,
        UINT32 start_segment,
        D2D1_INK_BEZIER_SEGMENT *segments,
        UINT32 segment_count);

    HRESULT (STDMETHODCALLTYPE *StreamAsGeometry)(
        ID2D1Ink *This,
        ID2D1InkStyle *ink_style,
        const D2D1_MATRIX_3X2_F *world_transform,
        float flattening_tolerance,
        ID2D1SimplifiedGeometrySink *geometry_sink);

    HRESULT (STDMETHODCALLTYPE *GetBounds)(
        ID2D1Ink *This,
        ID2D1InkStyle *ink_style,
        const D2D1_MATRIX_3X2_F *world_transform,
        D2D1_RECT_F *bounds);

    END_INTERFACE
} ID2D1InkVtbl;

interface ID2D1Ink {
    CONST_VTBL ID2D1InkVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1Ink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1Ink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1Ink_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1Resource methods ***/
#define ID2D1Ink_GetFactory(This,factory) (This)->lpVtbl->GetFactory(This,factory)
/*** ID2D1Ink methods ***/
#define ID2D1Ink_SetStartPoint(This,start_point) (This)->lpVtbl->SetStartPoint(This,start_point)
#define ID2D1Ink_GetStartPoint(This) ID2D1Ink_GetStartPoint_define_WIDL_C_INLINE_WRAPPERS_for_aggregate_return_support
#define ID2D1Ink_AddSegments(This,segments,segment_count) (This)->lpVtbl->AddSegments(This,segments,segment_count)
#define ID2D1Ink_RemoveSegmentsAtEnd(This,segment_count) (This)->lpVtbl->RemoveSegmentsAtEnd(This,segment_count)
#define ID2D1Ink_SetSegments(This,start_segment,segments,segment_count) (This)->lpVtbl->SetSegments(This,start_segment,segments,segment_count)
#define ID2D1Ink_SetSegmentAtEnd(This,segment) (This)->lpVtbl->SetSegmentAtEnd(This,segment)
#define ID2D1Ink_GetSegmentCount(This) (This)->lpVtbl->GetSegmentCount(This)
#define ID2D1Ink_GetSegments(This,start_segment,segments,segment_count) (This)->lpVtbl->GetSegments(This,start_segment,segments,segment_count)
#define ID2D1Ink_StreamAsGeometry(This,ink_style,world_transform,flattening_tolerance,geometry_sink) (This)->lpVtbl->StreamAsGeometry(This,ink_style,world_transform,flattening_tolerance,geometry_sink)
#define ID2D1Ink_GetBounds(This,ink_style,world_transform,bounds) (This)->lpVtbl->GetBounds(This,ink_style,world_transform,bounds)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1Ink_QueryInterface(ID2D1Ink* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1Ink_AddRef(ID2D1Ink* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1Ink_Release(ID2D1Ink* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1Resource methods ***/
static __WIDL_INLINE void ID2D1Ink_GetFactory(ID2D1Ink* This,ID2D1Factory **factory) {
    This->lpVtbl->GetFactory(This,factory);
}
/*** ID2D1Ink methods ***/
static __WIDL_INLINE void ID2D1Ink_SetStartPoint(ID2D1Ink* This,const D2D1_INK_POINT *start_point) {
    This->lpVtbl->SetStartPoint(This,start_point);
}
static __WIDL_INLINE D2D1_INK_POINT ID2D1Ink_GetStartPoint(ID2D1Ink* This) {
    D2D1_INK_POINT __ret;
    return *This->lpVtbl->GetStartPoint(This,&__ret);
}
static __WIDL_INLINE HRESULT ID2D1Ink_AddSegments(ID2D1Ink* This,const D2D1_INK_BEZIER_SEGMENT *segments,UINT32 segment_count) {
    return This->lpVtbl->AddSegments(This,segments,segment_count);
}
static __WIDL_INLINE HRESULT ID2D1Ink_RemoveSegmentsAtEnd(ID2D1Ink* This,UINT32 segment_count) {
    return This->lpVtbl->RemoveSegmentsAtEnd(This,segment_count);
}
static __WIDL_INLINE HRESULT ID2D1Ink_SetSegments(ID2D1Ink* This,UINT32 start_segment,const D2D1_INK_BEZIER_SEGMENT *segments,UINT32 segment_count) {
    return This->lpVtbl->SetSegments(This,start_segment,segments,segment_count);
}
static __WIDL_INLINE HRESULT ID2D1Ink_SetSegmentAtEnd(ID2D1Ink* This,const D2D1_INK_BEZIER_SEGMENT *segment) {
    return This->lpVtbl->SetSegmentAtEnd(This,segment);
}
static __WIDL_INLINE UINT32 ID2D1Ink_GetSegmentCount(ID2D1Ink* This) {
    return This->lpVtbl->GetSegmentCount(This);
}
static __WIDL_INLINE HRESULT ID2D1Ink_GetSegments(ID2D1Ink* This,UINT32 start_segment,D2D1_INK_BEZIER_SEGMENT *segments,UINT32 segment_count) {
    return This->lpVtbl->GetSegments(This,start_segment,segments,segment_count);
}
static __WIDL_INLINE HRESULT ID2D1Ink_StreamAsGeometry(ID2D1Ink* This,ID2D1InkStyle *ink_style,const D2D1_MATRIX_3X2_F *world_transform,float flattening_tolerance,ID2D1SimplifiedGeometrySink *geometry_sink) {
    return This->lpVtbl->StreamAsGeometry(This,ink_style,world_transform,flattening_tolerance,geometry_sink);
}
static __WIDL_INLINE HRESULT ID2D1Ink_GetBounds(ID2D1Ink* This,ID2D1InkStyle *ink_style,const D2D1_MATRIX_3X2_F *world_transform,D2D1_RECT_F *bounds) {
    return This->lpVtbl->GetBounds(This,ink_style,world_transform,bounds);
}
#endif
#endif

#endif


#endif  /* __ID2D1Ink_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1GradientMesh interface
 */
#ifndef __ID2D1GradientMesh_INTERFACE_DEFINED__
#define __ID2D1GradientMesh_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1GradientMesh, 0xf292e401, 0xc050, 0x4cde, 0x83,0xd7, 0x04,0x96,0x2d,0x3b,0x23,0xc2);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("f292e401-c050-4cde-83d7-04962d3b23c2")
ID2D1GradientMesh : public ID2D1Resource
{
    virtual UINT32 STDMETHODCALLTYPE GetPatchCount(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetPatches(
        UINT32 start_index,
        D2D1_GRADIENT_MESH_PATCH *patches,
        UINT32 patch_count) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1GradientMesh, 0xf292e401, 0xc050, 0x4cde, 0x83,0xd7, 0x04,0x96,0x2d,0x3b,0x23,0xc2)
#endif
#else
typedef struct ID2D1GradientMeshVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1GradientMesh *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1GradientMesh *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1GradientMesh *This);

    /*** ID2D1Resource methods ***/
    void (STDMETHODCALLTYPE *GetFactory)(
        ID2D1GradientMesh *This,
        ID2D1Factory **factory);

    /*** ID2D1GradientMesh methods ***/
    UINT32 (STDMETHODCALLTYPE *GetPatchCount)(
        ID2D1GradientMesh *This);

    HRESULT (STDMETHODCALLTYPE *GetPatches)(
        ID2D1GradientMesh *This,
        UINT32 start_index,
        D2D1_GRADIENT_MESH_PATCH *patches,
        UINT32 patch_count);

    END_INTERFACE
} ID2D1GradientMeshVtbl;

interface ID2D1GradientMesh {
    CONST_VTBL ID2D1GradientMeshVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1GradientMesh_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1GradientMesh_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1GradientMesh_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1Resource methods ***/
#define ID2D1GradientMesh_GetFactory(This,factory) (This)->lpVtbl->GetFactory(This,factory)
/*** ID2D1GradientMesh methods ***/
#define ID2D1GradientMesh_GetPatchCount(This) (This)->lpVtbl->GetPatchCount(This)
#define ID2D1GradientMesh_GetPatches(This,start_index,patches,patch_count) (This)->lpVtbl->GetPatches(This,start_index,patches,patch_count)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1GradientMesh_QueryInterface(ID2D1GradientMesh* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1GradientMesh_AddRef(ID2D1GradientMesh* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1GradientMesh_Release(ID2D1GradientMesh* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1Resource methods ***/
static __WIDL_INLINE void ID2D1GradientMesh_GetFactory(ID2D1GradientMesh* This,ID2D1Factory **factory) {
    This->lpVtbl->GetFactory(This,factory);
}
/*** ID2D1GradientMesh methods ***/
static __WIDL_INLINE UINT32 ID2D1GradientMesh_GetPatchCount(ID2D1GradientMesh* This) {
    return This->lpVtbl->GetPatchCount(This);
}
static __WIDL_INLINE HRESULT ID2D1GradientMesh_GetPatches(ID2D1GradientMesh* This,UINT32 start_index,D2D1_GRADIENT_MESH_PATCH *patches,UINT32 patch_count) {
    return This->lpVtbl->GetPatches(This,start_index,patches,patch_count);
}
#endif
#endif

#endif


#endif  /* __ID2D1GradientMesh_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1ImageSource interface
 */
#ifndef __ID2D1ImageSource_INTERFACE_DEFINED__
#define __ID2D1ImageSource_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1ImageSource, 0xc9b664e5, 0x74a1, 0x4378, 0x9a,0xc2, 0xee,0xfc,0x37,0xa3,0xf4,0xd8);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c9b664e5-74a1-4378-9ac2-eefc37a3f4d8")
ID2D1ImageSource : public ID2D1Image
{
    virtual HRESULT STDMETHODCALLTYPE OfferResources(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE TryReclaimResources(
        BOOL *resources_discarded) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1ImageSource, 0xc9b664e5, 0x74a1, 0x4378, 0x9a,0xc2, 0xee,0xfc,0x37,0xa3,0xf4,0xd8)
#endif
#else
typedef struct ID2D1ImageSourceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1ImageSource *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1ImageSource *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1ImageSource *This);

    /*** ID2D1Resource methods ***/
    void (STDMETHODCALLTYPE *GetFactory)(
        ID2D1ImageSource *This,
        ID2D1Factory **factory);

    /*** ID2D1ImageSource methods ***/
    HRESULT (STDMETHODCALLTYPE *OfferResources)(
        ID2D1ImageSource *This);

    HRESULT (STDMETHODCALLTYPE *TryReclaimResources)(
        ID2D1ImageSource *This,
        BOOL *resources_discarded);

    END_INTERFACE
} ID2D1ImageSourceVtbl;

interface ID2D1ImageSource {
    CONST_VTBL ID2D1ImageSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1ImageSource_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1ImageSource_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1ImageSource_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1Resource methods ***/
#define ID2D1ImageSource_GetFactory(This,factory) (This)->lpVtbl->GetFactory(This,factory)
/*** ID2D1ImageSource methods ***/
#define ID2D1ImageSource_OfferResources(This) (This)->lpVtbl->OfferResources(This)
#define ID2D1ImageSource_TryReclaimResources(This,resources_discarded) (This)->lpVtbl->TryReclaimResources(This,resources_discarded)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1ImageSource_QueryInterface(ID2D1ImageSource* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1ImageSource_AddRef(ID2D1ImageSource* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1ImageSource_Release(ID2D1ImageSource* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1Resource methods ***/
static __WIDL_INLINE void ID2D1ImageSource_GetFactory(ID2D1ImageSource* This,ID2D1Factory **factory) {
    This->lpVtbl->GetFactory(This,factory);
}
/*** ID2D1ImageSource methods ***/
static __WIDL_INLINE HRESULT ID2D1ImageSource_OfferResources(ID2D1ImageSource* This) {
    return This->lpVtbl->OfferResources(This);
}
static __WIDL_INLINE HRESULT ID2D1ImageSource_TryReclaimResources(ID2D1ImageSource* This,BOOL *resources_discarded) {
    return This->lpVtbl->TryReclaimResources(This,resources_discarded);
}
#endif
#endif

#endif


#endif  /* __ID2D1ImageSource_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1ImageSourceFromWic interface
 */
#ifndef __ID2D1ImageSourceFromWic_INTERFACE_DEFINED__
#define __ID2D1ImageSourceFromWic_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1ImageSourceFromWic, 0x77395441, 0x1c8f, 0x4555, 0x86,0x83, 0xf5,0x0d,0xab,0x0f,0xe7,0x92);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("77395441-1c8f-4555-8683-f50dab0fe792")
ID2D1ImageSourceFromWic : public ID2D1ImageSource
{
    virtual HRESULT STDMETHODCALLTYPE EnsureCached(
        const D2D1_RECT_U *rect_to_fill) = 0;

    virtual HRESULT STDMETHODCALLTYPE TrimCache(
        const D2D1_RECT_U *rect_to_preserve) = 0;

    virtual void STDMETHODCALLTYPE GetSource(
        IWICBitmapSource **source) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1ImageSourceFromWic, 0x77395441, 0x1c8f, 0x4555, 0x86,0x83, 0xf5,0x0d,0xab,0x0f,0xe7,0x92)
#endif
#else
typedef struct ID2D1ImageSourceFromWicVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1ImageSourceFromWic *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1ImageSourceFromWic *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1ImageSourceFromWic *This);

    /*** ID2D1Resource methods ***/
    void (STDMETHODCALLTYPE *GetFactory)(
        ID2D1ImageSourceFromWic *This,
        ID2D1Factory **factory);

    /*** ID2D1ImageSource methods ***/
    HRESULT (STDMETHODCALLTYPE *OfferResources)(
        ID2D1ImageSourceFromWic *This);

    HRESULT (STDMETHODCALLTYPE *TryReclaimResources)(
        ID2D1ImageSourceFromWic *This,
        BOOL *resources_discarded);

    /*** ID2D1ImageSourceFromWic methods ***/
    HRESULT (STDMETHODCALLTYPE *EnsureCached)(
        ID2D1ImageSourceFromWic *This,
        const D2D1_RECT_U *rect_to_fill);

    HRESULT (STDMETHODCALLTYPE *TrimCache)(
        ID2D1ImageSourceFromWic *This,
        const D2D1_RECT_U *rect_to_preserve);

    void (STDMETHODCALLTYPE *GetSource)(
        ID2D1ImageSourceFromWic *This,
        IWICBitmapSource **source);

    END_INTERFACE
} ID2D1ImageSourceFromWicVtbl;

interface ID2D1ImageSourceFromWic {
    CONST_VTBL ID2D1ImageSourceFromWicVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1ImageSourceFromWic_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1ImageSourceFromWic_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1ImageSourceFromWic_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1Resource methods ***/
#define ID2D1ImageSourceFromWic_GetFactory(This,factory) (This)->lpVtbl->GetFactory(This,factory)
/*** ID2D1ImageSource methods ***/
#define ID2D1ImageSourceFromWic_OfferResources(This) (This)->lpVtbl->OfferResources(This)
#define ID2D1ImageSourceFromWic_TryReclaimResources(This,resources_discarded) (This)->lpVtbl->TryReclaimResources(This,resources_discarded)
/*** ID2D1ImageSourceFromWic methods ***/
#define ID2D1ImageSourceFromWic_EnsureCached(This,rect_to_fill) (This)->lpVtbl->EnsureCached(This,rect_to_fill)
#define ID2D1ImageSourceFromWic_TrimCache(This,rect_to_preserve) (This)->lpVtbl->TrimCache(This,rect_to_preserve)
#define ID2D1ImageSourceFromWic_GetSource(This,source) (This)->lpVtbl->GetSource(This,source)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1ImageSourceFromWic_QueryInterface(ID2D1ImageSourceFromWic* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1ImageSourceFromWic_AddRef(ID2D1ImageSourceFromWic* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1ImageSourceFromWic_Release(ID2D1ImageSourceFromWic* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1Resource methods ***/
static __WIDL_INLINE void ID2D1ImageSourceFromWic_GetFactory(ID2D1ImageSourceFromWic* This,ID2D1Factory **factory) {
    This->lpVtbl->GetFactory(This,factory);
}
/*** ID2D1ImageSource methods ***/
static __WIDL_INLINE HRESULT ID2D1ImageSourceFromWic_OfferResources(ID2D1ImageSourceFromWic* This) {
    return This->lpVtbl->OfferResources(This);
}
static __WIDL_INLINE HRESULT ID2D1ImageSourceFromWic_TryReclaimResources(ID2D1ImageSourceFromWic* This,BOOL *resources_discarded) {
    return This->lpVtbl->TryReclaimResources(This,resources_discarded);
}
/*** ID2D1ImageSourceFromWic methods ***/
static __WIDL_INLINE HRESULT ID2D1ImageSourceFromWic_EnsureCached(ID2D1ImageSourceFromWic* This,const D2D1_RECT_U *rect_to_fill) {
    return This->lpVtbl->EnsureCached(This,rect_to_fill);
}
static __WIDL_INLINE HRESULT ID2D1ImageSourceFromWic_TrimCache(ID2D1ImageSourceFromWic* This,const D2D1_RECT_U *rect_to_preserve) {
    return This->lpVtbl->TrimCache(This,rect_to_preserve);
}
static __WIDL_INLINE void ID2D1ImageSourceFromWic_GetSource(ID2D1ImageSourceFromWic* This,IWICBitmapSource **source) {
    This->lpVtbl->GetSource(This,source);
}
#endif
#endif

#endif


#endif  /* __ID2D1ImageSourceFromWic_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1TransformedImageSource interface
 */
#ifndef __ID2D1TransformedImageSource_INTERFACE_DEFINED__
#define __ID2D1TransformedImageSource_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1TransformedImageSource, 0x7f1f79e5, 0x2796, 0x416c, 0x8f,0x55, 0x70,0x0f,0x91,0x14,0x45,0xe5);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("7f1f79e5-2796-416c-8f55-700f911445e5")
ID2D1TransformedImageSource : public ID2D1Image
{
    virtual void STDMETHODCALLTYPE GetSource(
        ID2D1ImageSource **source) = 0;

    virtual void STDMETHODCALLTYPE GetProperties(
        D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES *out) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1TransformedImageSource, 0x7f1f79e5, 0x2796, 0x416c, 0x8f,0x55, 0x70,0x0f,0x91,0x14,0x45,0xe5)
#endif
#else
typedef struct ID2D1TransformedImageSourceVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1TransformedImageSource *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1TransformedImageSource *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1TransformedImageSource *This);

    /*** ID2D1Resource methods ***/
    void (STDMETHODCALLTYPE *GetFactory)(
        ID2D1TransformedImageSource *This,
        ID2D1Factory **factory);

    /*** ID2D1TransformedImageSource methods ***/
    void (STDMETHODCALLTYPE *GetSource)(
        ID2D1TransformedImageSource *This,
        ID2D1ImageSource **source);

    void (STDMETHODCALLTYPE *GetProperties)(
        ID2D1TransformedImageSource *This,
        D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES *out);

    END_INTERFACE
} ID2D1TransformedImageSourceVtbl;

interface ID2D1TransformedImageSource {
    CONST_VTBL ID2D1TransformedImageSourceVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1TransformedImageSource_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1TransformedImageSource_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1TransformedImageSource_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1Resource methods ***/
#define ID2D1TransformedImageSource_GetFactory(This,factory) (This)->lpVtbl->GetFactory(This,factory)
/*** ID2D1TransformedImageSource methods ***/
#define ID2D1TransformedImageSource_GetSource(This,source) (This)->lpVtbl->GetSource(This,source)
#define ID2D1TransformedImageSource_GetProperties(This,out) (This)->lpVtbl->GetProperties(This,out)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1TransformedImageSource_QueryInterface(ID2D1TransformedImageSource* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1TransformedImageSource_AddRef(ID2D1TransformedImageSource* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1TransformedImageSource_Release(ID2D1TransformedImageSource* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1Resource methods ***/
static __WIDL_INLINE void ID2D1TransformedImageSource_GetFactory(ID2D1TransformedImageSource* This,ID2D1Factory **factory) {
    This->lpVtbl->GetFactory(This,factory);
}
/*** ID2D1TransformedImageSource methods ***/
static __WIDL_INLINE void ID2D1TransformedImageSource_GetSource(ID2D1TransformedImageSource* This,ID2D1ImageSource **source) {
    This->lpVtbl->GetSource(This,source);
}
static __WIDL_INLINE void ID2D1TransformedImageSource_GetProperties(ID2D1TransformedImageSource* This,D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES *out) {
    This->lpVtbl->GetProperties(This,out);
}
#endif
#endif

#endif


#endif  /* __ID2D1TransformedImageSource_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1LookupTable3D interface
 */
#ifndef __ID2D1LookupTable3D_INTERFACE_DEFINED__
#define __ID2D1LookupTable3D_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1LookupTable3D, 0x53dd9855, 0xa3b0, 0x4d5b, 0x82,0xe1, 0x26,0xe2,0x5c,0x5e,0x57,0x97);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("53dd9855-a3b0-4d5b-82e1-26e25c5e5797")
ID2D1LookupTable3D : public ID2D1Resource
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1LookupTable3D, 0x53dd9855, 0xa3b0, 0x4d5b, 0x82,0xe1, 0x26,0xe2,0x5c,0x5e,0x57,0x97)
#endif
#else
typedef struct ID2D1LookupTable3DVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1LookupTable3D *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1LookupTable3D *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1LookupTable3D *This);

    /*** ID2D1Resource methods ***/
    void (STDMETHODCALLTYPE *GetFactory)(
        ID2D1LookupTable3D *This,
        ID2D1Factory **factory);

    END_INTERFACE
} ID2D1LookupTable3DVtbl;

interface ID2D1LookupTable3D {
    CONST_VTBL ID2D1LookupTable3DVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1LookupTable3D_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1LookupTable3D_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1LookupTable3D_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1Resource methods ***/
#define ID2D1LookupTable3D_GetFactory(This,factory) (This)->lpVtbl->GetFactory(This,factory)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1LookupTable3D_QueryInterface(ID2D1LookupTable3D* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1LookupTable3D_AddRef(ID2D1LookupTable3D* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1LookupTable3D_Release(ID2D1LookupTable3D* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1Resource methods ***/
static __WIDL_INLINE void ID2D1LookupTable3D_GetFactory(ID2D1LookupTable3D* This,ID2D1Factory **factory) {
    This->lpVtbl->GetFactory(This,factory);
}
#endif
#endif

#endif


#endif  /* __ID2D1LookupTable3D_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1DeviceContext2 interface
 */
#ifndef __ID2D1DeviceContext2_INTERFACE_DEFINED__
#define __ID2D1DeviceContext2_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1DeviceContext2, 0x394ea6a3, 0x0c34, 0x4321, 0x95,0x0b, 0x6c,0xa2,0x0f,0x0b,0xe6,0xc7);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("394ea6a3-0c34-4321-950b-6ca20f0be6c7")
ID2D1DeviceContext2 : public ID2D1DeviceContext1
{
    virtual HRESULT STDMETHODCALLTYPE CreateInk(
        const D2D1_INK_POINT *start_point,
        ID2D1Ink **ink) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateInkStyle(
        const D2D1_INK_STYLE_PROPERTIES *ink_style_properties,
        ID2D1InkStyle **ink_style) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateGradientMesh(
        const D2D1_GRADIENT_MESH_PATCH *patches,
        UINT32 patches_count,
        ID2D1GradientMesh **gradient_mesh) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateImageSourceFromWic(
        IWICBitmapSource *wic_bitmap_source,
        D2D1_IMAGE_SOURCE_LOADING_OPTIONS loading_options,
        D2D1_ALPHA_MODE alpha_mode,
        ID2D1ImageSourceFromWic **image_source) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateLookupTable3D(
        D2D1_BUFFER_PRECISION precision,
        const UINT32 *extents,
        const BYTE *data,
        UINT32 data_count,
        const UINT32 *strides,
        ID2D1LookupTable3D **lookup_table) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateImageSourceFromDxgi(
        IDXGISurface **surfaces,
        UINT32 surface_count,
        DXGI_COLOR_SPACE_TYPE color_space,
        D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options,
        ID2D1ImageSource **image_source) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetGradientMeshWorldBounds(
        ID2D1GradientMesh *gradient_mesh,
        D2D1_RECT_F *bounds) = 0;

    virtual void STDMETHODCALLTYPE DrawInk(
        ID2D1Ink *ink,
        ID2D1Brush *brush,
        ID2D1InkStyle *ink_style) = 0;

    virtual void STDMETHODCALLTYPE DrawGradientMesh(
        ID2D1GradientMesh *gradient_mesh) = 0;

    virtual void STDMETHODCALLTYPE DrawGdiMetafile(
        ID2D1GdiMetafile *gdi_metafile,
        const D2D1_RECT_F *dst_rect,
        const D2D1_RECT_F *src_rect) = 0;

    virtual HRESULT STDMETHODCALLTYPE CreateTransformedImageSource(
        ID2D1ImageSource *source,
        const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES *props,
        ID2D1TransformedImageSource **transformed) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1DeviceContext2, 0x394ea6a3, 0x0c34, 0x4321, 0x95,0x0b, 0x6c,0xa2,0x0f,0x0b,0xe6,0xc7)
#endif
#else
typedef struct ID2D1DeviceContext2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1DeviceContext2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1DeviceContext2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1DeviceContext2 *This);

    /*** ID2D1Resource methods ***/
    void (STDMETHODCALLTYPE *GetFactory)(
        ID2D1DeviceContext2 *This,
        ID2D1Factory **factory);

    /*** ID2D1RenderTarget methods ***/
    HRESULT (STDMETHODCALLTYPE *CreateBitmap)(
        ID2D1DeviceContext2 *This,
        D2D1_SIZE_U size,
        const void *src_data,
        UINT32 pitch,
        const D2D1_BITMAP_PROPERTIES *desc,
        ID2D1Bitmap **bitmap);

    HRESULT (STDMETHODCALLTYPE *CreateBitmapFromWicBitmap)(
        ID2D1DeviceContext2 *This,
        IWICBitmapSource *bitmap_source,
        const D2D1_BITMAP_PROPERTIES *desc,
        ID2D1Bitmap **bitmap);

    HRESULT (STDMETHODCALLTYPE *CreateSharedBitmap)(
        ID2D1DeviceContext2 *This,
        REFIID iid,
        void *data,
        const D2D1_BITMAP_PROPERTIES *desc,
        ID2D1Bitmap **bitmap);

    HRESULT (STDMETHODCALLTYPE *CreateBitmapBrush)(
        ID2D1DeviceContext2 *This,
        ID2D1Bitmap *bitmap,
        const D2D1_BITMAP_BRUSH_PROPERTIES *bitmap_brush_desc,
        const D2D1_BRUSH_PROPERTIES *brush_desc,
        ID2D1BitmapBrush **brush);

    HRESULT (STDMETHODCALLTYPE *CreateSolidColorBrush)(
        ID2D1DeviceContext2 *This,
        const D2D1_COLOR_F *color,
        const D2D1_BRUSH_PROPERTIES *desc,
        ID2D1SolidColorBrush **brush);

    HRESULT (STDMETHODCALLTYPE *CreateGradientStopCollection)(
        ID2D1DeviceContext2 *This,
        const D2D1_GRADIENT_STOP *stops,
        UINT32 stop_count,
        D2D1_GAMMA gamma,
        D2D1_EXTEND_MODE extend_mode,
        ID2D1GradientStopCollection **gradient);

    HRESULT (STDMETHODCALLTYPE *CreateLinearGradientBrush)(
        ID2D1DeviceContext2 *This,
        const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES *gradient_brush_desc,
        const D2D1_BRUSH_PROPERTIES *brush_desc,
        ID2D1GradientStopCollection *gradient,
        ID2D1LinearGradientBrush **brush);

    HRESULT (STDMETHODCALLTYPE *CreateRadialGradientBrush)(
        ID2D1DeviceContext2 *This,
        const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES *gradient_brush_desc,
        const D2D1_BRUSH_PROPERTIES *brush_desc,
        ID2D1GradientStopCollection *gradient,
        ID2D1RadialGradientBrush **brush);

    HRESULT (STDMETHODCALLTYPE *CreateCompatibleRenderTarget)(
        ID2D1DeviceContext2 *This,
        const D2D1_SIZE_F *size,
        const D2D1_SIZE_U *pixel_size,
        const D2D1_PIXEL_FORMAT *format,
        D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,
        ID2D1BitmapRenderTarget **render_target);

    HRESULT (STDMETHODCALLTYPE *CreateLayer)(
        ID2D1DeviceContext2 *This,
        const D2D1_SIZE_F *size,
        ID2D1Layer **layer);

    HRESULT (STDMETHODCALLTYPE *CreateMesh)(
        ID2D1DeviceContext2 *This,
        ID2D1Mesh **mesh);

    void (STDMETHODCALLTYPE *DrawLine)(
        ID2D1DeviceContext2 *This,
        D2D1_POINT_2F p0,
        D2D1_POINT_2F p1,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    void (STDMETHODCALLTYPE *DrawRectangle)(
        ID2D1DeviceContext2 *This,
        const D2D1_RECT_F *rect,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    void (STDMETHODCALLTYPE *FillRectangle)(
        ID2D1DeviceContext2 *This,
        const D2D1_RECT_F *rect,
        ID2D1Brush *brush);

    void (STDMETHODCALLTYPE *DrawRoundedRectangle)(
        ID2D1DeviceContext2 *This,
        const D2D1_ROUNDED_RECT *rect,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    void (STDMETHODCALLTYPE *FillRoundedRectangle)(
        ID2D1DeviceContext2 *This,
        const D2D1_ROUNDED_RECT *rect,
        ID2D1Brush *brush);

    void (STDMETHODCALLTYPE *DrawEllipse)(
        ID2D1DeviceContext2 *This,
        const D2D1_ELLIPSE *ellipse,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    void (STDMETHODCALLTYPE *FillEllipse)(
        ID2D1DeviceContext2 *This,
        const D2D1_ELLIPSE *ellipse,
        ID2D1Brush *brush);

    void (STDMETHODCALLTYPE *DrawGeometry)(
        ID2D1DeviceContext2 *This,
        ID2D1Geometry *geometry,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    void (STDMETHODCALLTYPE *FillGeometry)(
        ID2D1DeviceContext2 *This,
        ID2D1Geometry *geometry,
        ID2D1Brush *brush,
        ID2D1Brush *opacity_brush);

    void (STDMETHODCALLTYPE *FillMesh)(
        ID2D1DeviceContext2 *This,
        ID2D1Mesh *mesh,
        ID2D1Brush *brush);

    void (STDMETHODCALLTYPE *FillOpacityMask)(
        ID2D1DeviceContext2 *This,
        ID2D1Bitmap *mask,
        ID2D1Brush *brush,
        D2D1_OPACITY_MASK_CONTENT content,
        const D2D1_RECT_F *dst_rect,
        const D2D1_RECT_F *src_rect);

    void (STDMETHODCALLTYPE *DrawBitmap)(
        ID2D1DeviceContext2 *This,
        ID2D1Bitmap *bitmap,
        const D2D1_RECT_F *dst_rect,
        float opacity,
        D2D1_BITMAP_INTERPOLATION_MODE interpolation_mode,
        const D2D1_RECT_F *src_rect);

    void (STDMETHODCALLTYPE *DrawText)(
        ID2D1DeviceContext2 *This,
        const WCHAR *string,
        UINT32 string_len,
        IDWriteTextFormat *text_format,
        const D2D1_RECT_F *layout_rect,
        ID2D1Brush *brush,
        D2D1_DRAW_TEXT_OPTIONS options,
        DWRITE_MEASURING_MODE measuring_mode);

    void (STDMETHODCALLTYPE *DrawTextLayout)(
        ID2D1DeviceContext2 *This,
        D2D1_POINT_2F origin,
        IDWriteTextLayout *layout,
        ID2D1Brush *brush,
        D2D1_DRAW_TEXT_OPTIONS options);

    void (STDMETHODCALLTYPE *DrawGlyphRun)(
        ID2D1DeviceContext2 *This,
        D2D1_POINT_2F baseline_origin,
        const DWRITE_GLYPH_RUN *glyph_run,
        ID2D1Brush *brush,
        DWRITE_MEASURING_MODE measuring_mode);

    void (STDMETHODCALLTYPE *SetTransform)(
        ID2D1DeviceContext2 *This,
        const D2D1_MATRIX_3X2_F *transform);

    void (STDMETHODCALLTYPE *GetTransform)(
        ID2D1DeviceContext2 *This,
        D2D1_MATRIX_3X2_F *transform);

    void (STDMETHODCALLTYPE *SetAntialiasMode)(
        ID2D1DeviceContext2 *This,
        D2D1_ANTIALIAS_MODE antialias_mode);

    D2D1_ANTIALIAS_MODE (STDMETHODCALLTYPE *GetAntialiasMode)(
        ID2D1DeviceContext2 *This);

    void (STDMETHODCALLTYPE *SetTextAntialiasMode)(
        ID2D1DeviceContext2 *This,
        D2D1_TEXT_ANTIALIAS_MODE antialias_mode);

    D2D1_TEXT_ANTIALIAS_MODE (STDMETHODCALLTYPE *GetTextAntialiasMode)(
        ID2D1DeviceContext2 *This);

    void (STDMETHODCALLTYPE *SetTextRenderingParams)(
        ID2D1DeviceContext2 *This,
        IDWriteRenderingParams *text_rendering_params);

    void (STDMETHODCALLTYPE *GetTextRenderingParams)(
        ID2D1DeviceContext2 *This,
        IDWriteRenderingParams **text_rendering_params);

    void (STDMETHODCALLTYPE *SetTags)(
        ID2D1DeviceContext2 *This,
        D2D1_TAG tag1,
        D2D1_TAG tag2);

    void (STDMETHODCALLTYPE *GetTags)(
        ID2D1DeviceContext2 *This,
        D2D1_TAG *tag1,
        D2D1_TAG *tag2);

    void (STDMETHODCALLTYPE *PushLayer)(
        ID2D1DeviceContext2 *This,
        const D2D1_LAYER_PARAMETERS *layer_parameters,
        ID2D1Layer *layer);

    void (STDMETHODCALLTYPE *PopLayer)(
        ID2D1DeviceContext2 *This);

    HRESULT (STDMETHODCALLTYPE *Flush)(
        ID2D1DeviceContext2 *This,
        D2D1_TAG *tag1,
        D2D1_TAG *tag2);

    void (STDMETHODCALLTYPE *SaveDrawingState)(
        ID2D1DeviceContext2 *This,
        ID2D1DrawingStateBlock *state_block);

    void (STDMETHODCALLTYPE *RestoreDrawingState)(
        ID2D1DeviceContext2 *This,
        ID2D1DrawingStateBlock *state_block);

    void (STDMETHODCALLTYPE *PushAxisAlignedClip)(
        ID2D1DeviceContext2 *This,
        const D2D1_RECT_F *clip_rect,
        D2D1_ANTIALIAS_MODE antialias_mode);

    void (STDMETHODCALLTYPE *PopAxisAlignedClip)(
        ID2D1DeviceContext2 *This);

    void (STDMETHODCALLTYPE *Clear)(
        ID2D1DeviceContext2 *This,
        const D2D1_COLOR_F *color);

    void (STDMETHODCALLTYPE *BeginDraw)(
        ID2D1DeviceContext2 *This);

    HRESULT (STDMETHODCALLTYPE *EndDraw)(
        ID2D1DeviceContext2 *This,
        D2D1_TAG *tag1,
        D2D1_TAG *tag2);

    D2D1_PIXEL_FORMAT * (STDMETHODCALLTYPE *GetPixelFormat)(
        ID2D1DeviceContext2 *This,
        D2D1_PIXEL_FORMAT *__ret);

    void (STDMETHODCALLTYPE *SetDpi)(
        ID2D1DeviceContext2 *This,
        float dpi_x,
        float dpi_y);

    void (STDMETHODCALLTYPE *GetDpi)(
        ID2D1DeviceContext2 *This,
        float *dpi_x,
        float *dpi_y);

    D2D1_SIZE_F * (STDMETHODCALLTYPE *GetSize)(
        ID2D1DeviceContext2 *This,
        D2D1_SIZE_F *__ret);

    D2D1_SIZE_U * (STDMETHODCALLTYPE *GetPixelSize)(
        ID2D1DeviceContext2 *This,
        D2D1_SIZE_U *__ret);

    UINT32 (STDMETHODCALLTYPE *GetMaximumBitmapSize)(
        ID2D1DeviceContext2 *This);

    BOOL (STDMETHODCALLTYPE *IsSupported)(
        ID2D1DeviceContext2 *This,
        const D2D1_RENDER_TARGET_PROPERTIES *desc);

    /*** ID2D1DeviceContext methods ***/
    HRESULT (STDMETHODCALLTYPE *ID2D1DeviceContext_CreateBitmap)(
        ID2D1DeviceContext2 *This,
        D2D1_SIZE_U size,
        const void *src_data,
        UINT32 pitch,
        const D2D1_BITMAP_PROPERTIES1 *desc,
        ID2D1Bitmap1 **bitmap);

    HRESULT (STDMETHODCALLTYPE *ID2D1DeviceContext_CreateBitmapFromWicBitmap)(
        ID2D1DeviceContext2 *This,
        IWICBitmapSource *bitmap_source,
        const D2D1_BITMAP_PROPERTIES1 *desc,
        ID2D1Bitmap1 **bitmap);

    HRESULT (STDMETHODCALLTYPE *CreateColorContext)(
        ID2D1DeviceContext2 *This,
        D2D1_COLOR_SPACE space,
        const BYTE *profile,
        UINT32 profile_size,
        ID2D1ColorContext **color_context);

    HRESULT (STDMETHODCALLTYPE *CreateColorContextFromFilename)(
        ID2D1DeviceContext2 *This,
        const WCHAR *filename,
        ID2D1ColorContext **color_context);

    HRESULT (STDMETHODCALLTYPE *CreateColorContextFromWicColorContext)(
        ID2D1DeviceContext2 *This,
        IWICColorContext *wic_color_context,
        ID2D1ColorContext **color_context);

    HRESULT (STDMETHODCALLTYPE *CreateBitmapFromDxgiSurface)(
        ID2D1DeviceContext2 *This,
        IDXGISurface *surface,
        const D2D1_BITMAP_PROPERTIES1 *desc,
        ID2D1Bitmap1 **bitmap);

    HRESULT (STDMETHODCALLTYPE *CreateEffect)(
        ID2D1DeviceContext2 *This,
        REFCLSID effect_id,
        ID2D1Effect **effect);

    HRESULT (STDMETHODCALLTYPE *ID2D1DeviceContext_CreateGradientStopCollection)(
        ID2D1DeviceContext2 *This,
        const D2D1_GRADIENT_STOP *stops,
        UINT32 stop_count,
        D2D1_COLOR_SPACE preinterpolation_space,
        D2D1_COLOR_SPACE postinterpolation_space,
        D2D1_BUFFER_PRECISION buffer_precision,
        D2D1_EXTEND_MODE extend_mode,
        D2D1_COLOR_INTERPOLATION_MODE color_interpolation_mode,
        ID2D1GradientStopCollection1 **gradient);

    HRESULT (STDMETHODCALLTYPE *CreateImageBrush)(
        ID2D1DeviceContext2 *This,
        ID2D1Image *image,
        const D2D1_IMAGE_BRUSH_PROPERTIES *image_brush_desc,
        const D2D1_BRUSH_PROPERTIES *brush_desc,
        ID2D1ImageBrush **brush);

    HRESULT (STDMETHODCALLTYPE *ID2D1DeviceContext_CreateBitmapBrush)(
        ID2D1DeviceContext2 *This,
        ID2D1Bitmap *bitmap,
        const D2D1_BITMAP_BRUSH_PROPERTIES1 *bitmap_brush_desc,
        const D2D1_BRUSH_PROPERTIES *brush_desc,
        ID2D1BitmapBrush1 **bitmap_brush);

    HRESULT (STDMETHODCALLTYPE *CreateCommandList)(
        ID2D1DeviceContext2 *This,
        ID2D1CommandList **command_list);

    BOOL (STDMETHODCALLTYPE *IsDxgiFormatSupported)(
        ID2D1DeviceContext2 *This,
        DXGI_FORMAT format);

    BOOL (STDMETHODCALLTYPE *IsBufferPrecisionSupported)(
        ID2D1DeviceContext2 *This,
        D2D1_BUFFER_PRECISION buffer_precision);

    void (STDMETHODCALLTYPE *GetImageLocalBounds)(
        ID2D1DeviceContext2 *This,
        ID2D1Image *image,
        D2D1_RECT_F *local_bounds);

    HRESULT (STDMETHODCALLTYPE *GetImageWorldBounds)(
        ID2D1DeviceContext2 *This,
        ID2D1Image *image,
        D2D1_RECT_F *world_bounds);

    HRESULT (STDMETHODCALLTYPE *GetGlyphRunWorldBounds)(
        ID2D1DeviceContext2 *This,
        D2D1_POINT_2F baseline_origin,
        const DWRITE_GLYPH_RUN *glyph_run,
        DWRITE_MEASURING_MODE measuring_mode,
        D2D1_RECT_F *bounds);

    void (STDMETHODCALLTYPE *GetDevice)(
        ID2D1DeviceContext2 *This,
        ID2D1Device **device);

    void (STDMETHODCALLTYPE *SetTarget)(
        ID2D1DeviceContext2 *This,
        ID2D1Image *target);

    void (STDMETHODCALLTYPE *GetTarget)(
        ID2D1DeviceContext2 *This,
        ID2D1Image **target);

    void (STDMETHODCALLTYPE *SetRenderingControls)(
        ID2D1DeviceContext2 *This,
        const D2D1_RENDERING_CONTROLS *rendering_controls);

    void (STDMETHODCALLTYPE *GetRenderingControls)(
        ID2D1DeviceContext2 *This,
        D2D1_RENDERING_CONTROLS *rendering_controls);

    void (STDMETHODCALLTYPE *SetPrimitiveBlend)(
        ID2D1DeviceContext2 *This,
        D2D1_PRIMITIVE_BLEND primitive_blend);

    D2D1_PRIMITIVE_BLEND (STDMETHODCALLTYPE *GetPrimitiveBlend)(
        ID2D1DeviceContext2 *This);

    void (STDMETHODCALLTYPE *SetUnitMode)(
        ID2D1DeviceContext2 *This,
        D2D1_UNIT_MODE unit_mode);

    D2D1_UNIT_MODE (STDMETHODCALLTYPE *GetUnitMode)(
        ID2D1DeviceContext2 *This);

    void (STDMETHODCALLTYPE *ID2D1DeviceContext_DrawGlyphRun)(
        ID2D1DeviceContext2 *This,
        D2D1_POINT_2F baseline_origin,
        const DWRITE_GLYPH_RUN *glyph_run,
        const DWRITE_GLYPH_RUN_DESCRIPTION *glyph_run_desc,
        ID2D1Brush *brush,
        DWRITE_MEASURING_MODE measuring_mode);

    void (STDMETHODCALLTYPE *DrawImage)(
        ID2D1DeviceContext2 *This,
        ID2D1Image *image,
        const D2D1_POINT_2F *target_offset,
        const D2D1_RECT_F *image_rect,
        D2D1_INTERPOLATION_MODE interpolation_mode,
        D2D1_COMPOSITE_MODE composite_mode);

    void (STDMETHODCALLTYPE *DrawGdiMetafile)(
        ID2D1DeviceContext2 *This,
        ID2D1GdiMetafile *metafile,
        const D2D1_POINT_2F *target_offset);

    void (STDMETHODCALLTYPE *ID2D1DeviceContext_DrawBitmap)(
        ID2D1DeviceContext2 *This,
        ID2D1Bitmap *bitmap,
        const D2D1_RECT_F *dst_rect,
        float opacity,
        D2D1_INTERPOLATION_MODE interpolation_mode,
        const D2D1_RECT_F *src_rect,
        const D2D1_MATRIX_4X4_F *perspective_transform);

    void (STDMETHODCALLTYPE *ID2D1DeviceContext_PushLayer)(
        ID2D1DeviceContext2 *This,
        const D2D1_LAYER_PARAMETERS1 *layer_parameters,
        ID2D1Layer *layer);

    HRESULT (STDMETHODCALLTYPE *InvalidateEffectInputRectangle)(
        ID2D1DeviceContext2 *This,
        ID2D1Effect *effect,
        UINT32 input,
        const D2D1_RECT_F *input_rect);

    HRESULT (STDMETHODCALLTYPE *GetEffectInvalidRectangleCount)(
        ID2D1DeviceContext2 *This,
        ID2D1Effect *effect,
        UINT32 *rect_count);

    HRESULT (STDMETHODCALLTYPE *GetEffectInvalidRectangles)(
        ID2D1DeviceContext2 *This,
        ID2D1Effect *effect,
        D2D1_RECT_F *rectangles,
        UINT32 rect_count);

    HRESULT (STDMETHODCALLTYPE *GetEffectRequiredInputRectangles)(
        ID2D1DeviceContext2 *This,
        ID2D1Effect *effect,
        const D2D1_RECT_F *image_rect,
        const D2D1_EFFECT_INPUT_DESCRIPTION *desc,
        D2D1_RECT_F *input_rect,
        UINT32 input_count);

    void (STDMETHODCALLTYPE *ID2D1DeviceContext_FillOpacityMask)(
        ID2D1DeviceContext2 *This,
        ID2D1Bitmap *mask,
        ID2D1Brush *brush,
        const D2D1_RECT_F *dst_rect,
        const D2D1_RECT_F *src_rect);

    /*** ID2D1DeviceContext1 methods ***/
    HRESULT (STDMETHODCALLTYPE *CreateFilledGeometryRealization)(
        ID2D1DeviceContext2 *This,
        ID2D1Geometry *geometry,
        float tolerance,
        ID2D1GeometryRealization **realization);

    HRESULT (STDMETHODCALLTYPE *CreateStrokedGeometryRealization)(
        ID2D1DeviceContext2 *This,
        ID2D1Geometry *geometry,
        float tolerance,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style,
        ID2D1GeometryRealization **realization);

    void (STDMETHODCALLTYPE *DrawGeometryRealization)(
        ID2D1DeviceContext2 *This,
        ID2D1GeometryRealization *realization,
        ID2D1Brush *brush);

    /*** ID2D1DeviceContext2 methods ***/
    HRESULT (STDMETHODCALLTYPE *CreateInk)(
        ID2D1DeviceContext2 *This,
        const D2D1_INK_POINT *start_point,
        ID2D1Ink **ink);

    HRESULT (STDMETHODCALLTYPE *CreateInkStyle)(
        ID2D1DeviceContext2 *This,
        const D2D1_INK_STYLE_PROPERTIES *ink_style_properties,
        ID2D1InkStyle **ink_style);

    HRESULT (STDMETHODCALLTYPE *CreateGradientMesh)(
        ID2D1DeviceContext2 *This,
        const D2D1_GRADIENT_MESH_PATCH *patches,
        UINT32 patches_count,
        ID2D1GradientMesh **gradient_mesh);

    HRESULT (STDMETHODCALLTYPE *CreateImageSourceFromWic)(
        ID2D1DeviceContext2 *This,
        IWICBitmapSource *wic_bitmap_source,
        D2D1_IMAGE_SOURCE_LOADING_OPTIONS loading_options,
        D2D1_ALPHA_MODE alpha_mode,
        ID2D1ImageSourceFromWic **image_source);

    HRESULT (STDMETHODCALLTYPE *CreateLookupTable3D)(
        ID2D1DeviceContext2 *This,
        D2D1_BUFFER_PRECISION precision,
        const UINT32 *extents,
        const BYTE *data,
        UINT32 data_count,
        const UINT32 *strides,
        ID2D1LookupTable3D **lookup_table);

    HRESULT (STDMETHODCALLTYPE *CreateImageSourceFromDxgi)(
        ID2D1DeviceContext2 *This,
        IDXGISurface **surfaces,
        UINT32 surface_count,
        DXGI_COLOR_SPACE_TYPE color_space,
        D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options,
        ID2D1ImageSource **image_source);

    HRESULT (STDMETHODCALLTYPE *GetGradientMeshWorldBounds)(
        ID2D1DeviceContext2 *This,
        ID2D1GradientMesh *gradient_mesh,
        D2D1_RECT_F *bounds);

    void (STDMETHODCALLTYPE *DrawInk)(
        ID2D1DeviceContext2 *This,
        ID2D1Ink *ink,
        ID2D1Brush *brush,
        ID2D1InkStyle *ink_style);

    void (STDMETHODCALLTYPE *DrawGradientMesh)(
        ID2D1DeviceContext2 *This,
        ID2D1GradientMesh *gradient_mesh);

    void (STDMETHODCALLTYPE *ID2D1DeviceContext2_DrawGdiMetafile)(
        ID2D1DeviceContext2 *This,
        ID2D1GdiMetafile *gdi_metafile,
        const D2D1_RECT_F *dst_rect,
        const D2D1_RECT_F *src_rect);

    HRESULT (STDMETHODCALLTYPE *CreateTransformedImageSource)(
        ID2D1DeviceContext2 *This,
        ID2D1ImageSource *source,
        const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES *props,
        ID2D1TransformedImageSource **transformed);

    END_INTERFACE
} ID2D1DeviceContext2Vtbl;

interface ID2D1DeviceContext2 {
    CONST_VTBL ID2D1DeviceContext2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1DeviceContext2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1DeviceContext2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1DeviceContext2_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1Resource methods ***/
#define ID2D1DeviceContext2_GetFactory(This,factory) (This)->lpVtbl->GetFactory(This,factory)
/*** ID2D1RenderTarget methods ***/
#define ID2D1DeviceContext2_CreateSharedBitmap(This,iid,data,desc,bitmap) (This)->lpVtbl->CreateSharedBitmap(This,iid,data,desc,bitmap)
#define ID2D1DeviceContext2_CreateSolidColorBrush(This,color,desc,brush) (This)->lpVtbl->CreateSolidColorBrush(This,color,desc,brush)
#define ID2D1DeviceContext2_CreateLinearGradientBrush(This,gradient_brush_desc,brush_desc,gradient,brush) (This)->lpVtbl->CreateLinearGradientBrush(This,gradient_brush_desc,brush_desc,gradient,brush)
#define ID2D1DeviceContext2_CreateRadialGradientBrush(This,gradient_brush_desc,brush_desc,gradient,brush) (This)->lpVtbl->CreateRadialGradientBrush(This,gradient_brush_desc,brush_desc,gradient,brush)
#define ID2D1DeviceContext2_CreateCompatibleRenderTarget(This,size,pixel_size,format,options,render_target) (This)->lpVtbl->CreateCompatibleRenderTarget(This,size,pixel_size,format,options,render_target)
#define ID2D1DeviceContext2_CreateLayer(This,size,layer) (This)->lpVtbl->CreateLayer(This,size,layer)
#define ID2D1DeviceContext2_CreateMesh(This,mesh) (This)->lpVtbl->CreateMesh(This,mesh)
#define ID2D1DeviceContext2_DrawLine(This,p0,p1,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawLine(This,p0,p1,brush,stroke_width,stroke_style)
#define ID2D1DeviceContext2_DrawRectangle(This,rect,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawRectangle(This,rect,brush,stroke_width,stroke_style)
#define ID2D1DeviceContext2_FillRectangle(This,rect,brush) (This)->lpVtbl->FillRectangle(This,rect,brush)
#define ID2D1DeviceContext2_DrawRoundedRectangle(This,rect,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawRoundedRectangle(This,rect,brush,stroke_width,stroke_style)
#define ID2D1DeviceContext2_FillRoundedRectangle(This,rect,brush) (This)->lpVtbl->FillRoundedRectangle(This,rect,brush)
#define ID2D1DeviceContext2_DrawEllipse(This,ellipse,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawEllipse(This,ellipse,brush,stroke_width,stroke_style)
#define ID2D1DeviceContext2_FillEllipse(This,ellipse,brush) (This)->lpVtbl->FillEllipse(This,ellipse,brush)
#define ID2D1DeviceContext2_DrawGeometry(This,geometry,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawGeometry(This,geometry,brush,stroke_width,stroke_style)
#define ID2D1DeviceContext2_FillGeometry(This,geometry,brush,opacity_brush) (This)->lpVtbl->FillGeometry(This,geometry,brush,opacity_brush)
#define ID2D1DeviceContext2_FillMesh(This,mesh,brush) (This)->lpVtbl->FillMesh(This,mesh,brush)
#define ID2D1DeviceContext2_DrawText(This,string,string_len,text_format,layout_rect,brush,options,measuring_mode) (This)->lpVtbl->DrawText(This,string,string_len,text_format,layout_rect,brush,options,measuring_mode)
#define ID2D1DeviceContext2_DrawTextLayout(This,origin,layout,brush,options) (This)->lpVtbl->DrawTextLayout(This,origin,layout,brush,options)
#define ID2D1DeviceContext2_SetTransform(This,transform) (This)->lpVtbl->SetTransform(This,transform)
#define ID2D1DeviceContext2_GetTransform(This,transform) (This)->lpVtbl->GetTransform(This,transform)
#define ID2D1DeviceContext2_SetAntialiasMode(This,antialias_mode) (This)->lpVtbl->SetAntialiasMode(This,antialias_mode)
#define ID2D1DeviceContext2_GetAntialiasMode(This) (This)->lpVtbl->GetAntialiasMode(This)
#define ID2D1DeviceContext2_SetTextAntialiasMode(This,antialias_mode) (This)->lpVtbl->SetTextAntialiasMode(This,antialias_mode)
#define ID2D1DeviceContext2_GetTextAntialiasMode(This) (This)->lpVtbl->GetTextAntialiasMode(This)
#define ID2D1DeviceContext2_SetTextRenderingParams(This,text_rendering_params) (This)->lpVtbl->SetTextRenderingParams(This,text_rendering_params)
#define ID2D1DeviceContext2_GetTextRenderingParams(This,text_rendering_params) (This)->lpVtbl->GetTextRenderingParams(This,text_rendering_params)
#define ID2D1DeviceContext2_SetTags(This,tag1,tag2) (This)->lpVtbl->SetTags(This,tag1,tag2)
#define ID2D1DeviceContext2_GetTags(This,tag1,tag2) (This)->lpVtbl->GetTags(This,tag1,tag2)
#define ID2D1DeviceContext2_PopLayer(This) (This)->lpVtbl->PopLayer(This)
#define ID2D1DeviceContext2_Flush(This,tag1,tag2) (This)->lpVtbl->Flush(This,tag1,tag2)
#define ID2D1DeviceContext2_SaveDrawingState(This,state_block) (This)->lpVtbl->SaveDrawingState(This,state_block)
#define ID2D1DeviceContext2_RestoreDrawingState(This,state_block) (This)->lpVtbl->RestoreDrawingState(This,state_block)
#define ID2D1DeviceContext2_PushAxisAlignedClip(This,clip_rect,antialias_mode) (This)->lpVtbl->PushAxisAlignedClip(This,clip_rect,antialias_mode)
#define ID2D1DeviceContext2_PopAxisAlignedClip(This) (This)->lpVtbl->PopAxisAlignedClip(This)
#define ID2D1DeviceContext2_Clear(This,color) (This)->lpVtbl->Clear(This,color)
#define ID2D1DeviceContext2_BeginDraw(This) (This)->lpVtbl->BeginDraw(This)
#define ID2D1DeviceContext2_EndDraw(This,tag1,tag2) (This)->lpVtbl->EndDraw(This,tag1,tag2)
#define ID2D1DeviceContext2_GetPixelFormat(This) ID2D1DeviceContext2_GetPixelFormat_define_WIDL_C_INLINE_WRAPPERS_for_aggregate_return_support
#define ID2D1DeviceContext2_SetDpi(This,dpi_x,dpi_y) (This)->lpVtbl->SetDpi(This,dpi_x,dpi_y)
#define ID2D1DeviceContext2_GetDpi(This,dpi_x,dpi_y) (This)->lpVtbl->GetDpi(This,dpi_x,dpi_y)
#define ID2D1DeviceContext2_GetSize(This) ID2D1DeviceContext2_GetSize_define_WIDL_C_INLINE_WRAPPERS_for_aggregate_return_support
#define ID2D1DeviceContext2_GetPixelSize(This) ID2D1DeviceContext2_GetPixelSize_define_WIDL_C_INLINE_WRAPPERS_for_aggregate_return_support
#define ID2D1DeviceContext2_GetMaximumBitmapSize(This) (This)->lpVtbl->GetMaximumBitmapSize(This)
#define ID2D1DeviceContext2_IsSupported(This,desc) (This)->lpVtbl->IsSupported(This,desc)
/*** ID2D1DeviceContext methods ***/
#define ID2D1DeviceContext2_CreateBitmap(This,size,src_data,pitch,desc,bitmap) (This)->lpVtbl->ID2D1DeviceContext_CreateBitmap(This,size,src_data,pitch,desc,bitmap)
#define ID2D1DeviceContext2_CreateBitmapFromWicBitmap(This,bitmap_source,desc,bitmap) (This)->lpVtbl->ID2D1DeviceContext_CreateBitmapFromWicBitmap(This,bitmap_source,desc,bitmap)
#define ID2D1DeviceContext2_CreateColorContext(This,space,profile,profile_size,color_context) (This)->lpVtbl->CreateColorContext(This,space,profile,profile_size,color_context)
#define ID2D1DeviceContext2_CreateColorContextFromFilename(This,filename,color_context) (This)->lpVtbl->CreateColorContextFromFilename(This,filename,color_context)
#define ID2D1DeviceContext2_CreateColorContextFromWicColorContext(This,wic_color_context,color_context) (This)->lpVtbl->CreateColorContextFromWicColorContext(This,wic_color_context,color_context)
#define ID2D1DeviceContext2_CreateBitmapFromDxgiSurface(This,surface,desc,bitmap) (This)->lpVtbl->CreateBitmapFromDxgiSurface(This,surface,desc,bitmap)
#define ID2D1DeviceContext2_CreateEffect(This,effect_id,effect) (This)->lpVtbl->CreateEffect(This,effect_id,effect)
#define ID2D1DeviceContext2_CreateGradientStopCollection(This,stops,stop_count,preinterpolation_space,postinterpolation_space,buffer_precision,extend_mode,color_interpolation_mode,gradient) (This)->lpVtbl->ID2D1DeviceContext_CreateGradientStopCollection(This,stops,stop_count,preinterpolation_space,postinterpolation_space,buffer_precision,extend_mode,color_interpolation_mode,gradient)
#define ID2D1DeviceContext2_CreateImageBrush(This,image,image_brush_desc,brush_desc,brush) (This)->lpVtbl->CreateImageBrush(This,image,image_brush_desc,brush_desc,brush)
#define ID2D1DeviceContext2_CreateBitmapBrush(This,bitmap,bitmap_brush_desc,brush_desc,bitmap_brush) (This)->lpVtbl->ID2D1DeviceContext_CreateBitmapBrush(This,bitmap,bitmap_brush_desc,brush_desc,bitmap_brush)
#define ID2D1DeviceContext2_CreateCommandList(This,command_list) (This)->lpVtbl->CreateCommandList(This,command_list)
#define ID2D1DeviceContext2_IsDxgiFormatSupported(This,format) (This)->lpVtbl->IsDxgiFormatSupported(This,format)
#define ID2D1DeviceContext2_IsBufferPrecisionSupported(This,buffer_precision) (This)->lpVtbl->IsBufferPrecisionSupported(This,buffer_precision)
#define ID2D1DeviceContext2_GetImageLocalBounds(This,image,local_bounds) (This)->lpVtbl->GetImageLocalBounds(This,image,local_bounds)
#define ID2D1DeviceContext2_GetImageWorldBounds(This,image,world_bounds) (This)->lpVtbl->GetImageWorldBounds(This,image,world_bounds)
#define ID2D1DeviceContext2_GetGlyphRunWorldBounds(This,baseline_origin,glyph_run,measuring_mode,bounds) (This)->lpVtbl->GetGlyphRunWorldBounds(This,baseline_origin,glyph_run,measuring_mode,bounds)
#define ID2D1DeviceContext2_GetDevice(This,device) (This)->lpVtbl->GetDevice(This,device)
#define ID2D1DeviceContext2_SetTarget(This,target) (This)->lpVtbl->SetTarget(This,target)
#define ID2D1DeviceContext2_GetTarget(This,target) (This)->lpVtbl->GetTarget(This,target)
#define ID2D1DeviceContext2_SetRenderingControls(This,rendering_controls) (This)->lpVtbl->SetRenderingControls(This,rendering_controls)
#define ID2D1DeviceContext2_GetRenderingControls(This,rendering_controls) (This)->lpVtbl->GetRenderingControls(This,rendering_controls)
#define ID2D1DeviceContext2_SetPrimitiveBlend(This,primitive_blend) (This)->lpVtbl->SetPrimitiveBlend(This,primitive_blend)
#define ID2D1DeviceContext2_GetPrimitiveBlend(This) (This)->lpVtbl->GetPrimitiveBlend(This)
#define ID2D1DeviceContext2_SetUnitMode(This,unit_mode) (This)->lpVtbl->SetUnitMode(This,unit_mode)
#define ID2D1DeviceContext2_GetUnitMode(This) (This)->lpVtbl->GetUnitMode(This)
#define ID2D1DeviceContext2_DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode) (This)->lpVtbl->ID2D1DeviceContext_DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode)
#define ID2D1DeviceContext2_DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode) (This)->lpVtbl->DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode)
#define ID2D1DeviceContext2_DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform) (This)->lpVtbl->ID2D1DeviceContext_DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform)
#define ID2D1DeviceContext2_PushLayer(This,layer_parameters,layer) (This)->lpVtbl->ID2D1DeviceContext_PushLayer(This,layer_parameters,layer)
#define ID2D1DeviceContext2_InvalidateEffectInputRectangle(This,effect,input,input_rect) (This)->lpVtbl->InvalidateEffectInputRectangle(This,effect,input,input_rect)
#define ID2D1DeviceContext2_GetEffectInvalidRectangleCount(This,effect,rect_count) (This)->lpVtbl->GetEffectInvalidRectangleCount(This,effect,rect_count)
#define ID2D1DeviceContext2_GetEffectInvalidRectangles(This,effect,rectangles,rect_count) (This)->lpVtbl->GetEffectInvalidRectangles(This,effect,rectangles,rect_count)
#define ID2D1DeviceContext2_GetEffectRequiredInputRectangles(This,effect,image_rect,desc,input_rect,input_count) (This)->lpVtbl->GetEffectRequiredInputRectangles(This,effect,image_rect,desc,input_rect,input_count)
#define ID2D1DeviceContext2_FillOpacityMask(This,mask,brush,dst_rect,src_rect) (This)->lpVtbl->ID2D1DeviceContext_FillOpacityMask(This,mask,brush,dst_rect,src_rect)
/*** ID2D1DeviceContext1 methods ***/
#define ID2D1DeviceContext2_CreateFilledGeometryRealization(This,geometry,tolerance,realization) (This)->lpVtbl->CreateFilledGeometryRealization(This,geometry,tolerance,realization)
#define ID2D1DeviceContext2_CreateStrokedGeometryRealization(This,geometry,tolerance,stroke_width,stroke_style,realization) (This)->lpVtbl->CreateStrokedGeometryRealization(This,geometry,tolerance,stroke_width,stroke_style,realization)
#define ID2D1DeviceContext2_DrawGeometryRealization(This,realization,brush) (This)->lpVtbl->DrawGeometryRealization(This,realization,brush)
/*** ID2D1DeviceContext2 methods ***/
#define ID2D1DeviceContext2_CreateInk(This,start_point,ink) (This)->lpVtbl->CreateInk(This,start_point,ink)
#define ID2D1DeviceContext2_CreateInkStyle(This,ink_style_properties,ink_style) (This)->lpVtbl->CreateInkStyle(This,ink_style_properties,ink_style)
#define ID2D1DeviceContext2_CreateGradientMesh(This,patches,patches_count,gradient_mesh) (This)->lpVtbl->CreateGradientMesh(This,patches,patches_count,gradient_mesh)
#define ID2D1DeviceContext2_CreateImageSourceFromWic(This,wic_bitmap_source,loading_options,alpha_mode,image_source) (This)->lpVtbl->CreateImageSourceFromWic(This,wic_bitmap_source,loading_options,alpha_mode,image_source)
#define ID2D1DeviceContext2_CreateLookupTable3D(This,precision,extents,data,data_count,strides,lookup_table) (This)->lpVtbl->CreateLookupTable3D(This,precision,extents,data,data_count,strides,lookup_table)
#define ID2D1DeviceContext2_CreateImageSourceFromDxgi(This,surfaces,surface_count,color_space,options,image_source) (This)->lpVtbl->CreateImageSourceFromDxgi(This,surfaces,surface_count,color_space,options,image_source)
#define ID2D1DeviceContext2_GetGradientMeshWorldBounds(This,gradient_mesh,bounds) (This)->lpVtbl->GetGradientMeshWorldBounds(This,gradient_mesh,bounds)
#define ID2D1DeviceContext2_DrawInk(This,ink,brush,ink_style) (This)->lpVtbl->DrawInk(This,ink,brush,ink_style)
#define ID2D1DeviceContext2_DrawGradientMesh(This,gradient_mesh) (This)->lpVtbl->DrawGradientMesh(This,gradient_mesh)
#define ID2D1DeviceContext2_DrawGdiMetafile(This,gdi_metafile,dst_rect,src_rect) (This)->lpVtbl->ID2D1DeviceContext2_DrawGdiMetafile(This,gdi_metafile,dst_rect,src_rect)
#define ID2D1DeviceContext2_CreateTransformedImageSource(This,source,props,transformed) (This)->lpVtbl->CreateTransformedImageSource(This,source,props,transformed)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_QueryInterface(ID2D1DeviceContext2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1DeviceContext2_AddRef(ID2D1DeviceContext2* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1DeviceContext2_Release(ID2D1DeviceContext2* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1Resource methods ***/
static __WIDL_INLINE void ID2D1DeviceContext2_GetFactory(ID2D1DeviceContext2* This,ID2D1Factory **factory) {
    This->lpVtbl->GetFactory(This,factory);
}
/*** ID2D1RenderTarget methods ***/
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateSharedBitmap(ID2D1DeviceContext2* This,REFIID iid,void *data,const D2D1_BITMAP_PROPERTIES *desc,ID2D1Bitmap **bitmap) {
    return This->lpVtbl->CreateSharedBitmap(This,iid,data,desc,bitmap);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateSolidColorBrush(ID2D1DeviceContext2* This,const D2D1_COLOR_F *color,const D2D1_BRUSH_PROPERTIES *desc,ID2D1SolidColorBrush **brush) {
    return This->lpVtbl->CreateSolidColorBrush(This,color,desc,brush);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateLinearGradientBrush(ID2D1DeviceContext2* This,const D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES *gradient_brush_desc,const D2D1_BRUSH_PROPERTIES *brush_desc,ID2D1GradientStopCollection *gradient,ID2D1LinearGradientBrush **brush) {
    return This->lpVtbl->CreateLinearGradientBrush(This,gradient_brush_desc,brush_desc,gradient,brush);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateRadialGradientBrush(ID2D1DeviceContext2* This,const D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES *gradient_brush_desc,const D2D1_BRUSH_PROPERTIES *brush_desc,ID2D1GradientStopCollection *gradient,ID2D1RadialGradientBrush **brush) {
    return This->lpVtbl->CreateRadialGradientBrush(This,gradient_brush_desc,brush_desc,gradient,brush);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateCompatibleRenderTarget(ID2D1DeviceContext2* This,const D2D1_SIZE_F *size,const D2D1_SIZE_U *pixel_size,const D2D1_PIXEL_FORMAT *format,D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,ID2D1BitmapRenderTarget **render_target) {
    return This->lpVtbl->CreateCompatibleRenderTarget(This,size,pixel_size,format,options,render_target);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateLayer(ID2D1DeviceContext2* This,const D2D1_SIZE_F *size,ID2D1Layer **layer) {
    return This->lpVtbl->CreateLayer(This,size,layer);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateMesh(ID2D1DeviceContext2* This,ID2D1Mesh **mesh) {
    return This->lpVtbl->CreateMesh(This,mesh);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawLine(ID2D1DeviceContext2* This,D2D1_POINT_2F p0,D2D1_POINT_2F p1,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    This->lpVtbl->DrawLine(This,p0,p1,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawRectangle(ID2D1DeviceContext2* This,const D2D1_RECT_F *rect,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    This->lpVtbl->DrawRectangle(This,rect,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE void ID2D1DeviceContext2_FillRectangle(ID2D1DeviceContext2* This,const D2D1_RECT_F *rect,ID2D1Brush *brush) {
    This->lpVtbl->FillRectangle(This,rect,brush);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawRoundedRectangle(ID2D1DeviceContext2* This,const D2D1_ROUNDED_RECT *rect,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    This->lpVtbl->DrawRoundedRectangle(This,rect,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE void ID2D1DeviceContext2_FillRoundedRectangle(ID2D1DeviceContext2* This,const D2D1_ROUNDED_RECT *rect,ID2D1Brush *brush) {
    This->lpVtbl->FillRoundedRectangle(This,rect,brush);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawEllipse(ID2D1DeviceContext2* This,const D2D1_ELLIPSE *ellipse,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    This->lpVtbl->DrawEllipse(This,ellipse,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE void ID2D1DeviceContext2_FillEllipse(ID2D1DeviceContext2* This,const D2D1_ELLIPSE *ellipse,ID2D1Brush *brush) {
    This->lpVtbl->FillEllipse(This,ellipse,brush);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawGeometry(ID2D1DeviceContext2* This,ID2D1Geometry *geometry,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    This->lpVtbl->DrawGeometry(This,geometry,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE void ID2D1DeviceContext2_FillGeometry(ID2D1DeviceContext2* This,ID2D1Geometry *geometry,ID2D1Brush *brush,ID2D1Brush *opacity_brush) {
    This->lpVtbl->FillGeometry(This,geometry,brush,opacity_brush);
}
static __WIDL_INLINE void ID2D1DeviceContext2_FillMesh(ID2D1DeviceContext2* This,ID2D1Mesh *mesh,ID2D1Brush *brush) {
    This->lpVtbl->FillMesh(This,mesh,brush);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawText(ID2D1DeviceContext2* This,const WCHAR *string,UINT32 string_len,IDWriteTextFormat *text_format,const D2D1_RECT_F *layout_rect,ID2D1Brush *brush,D2D1_DRAW_TEXT_OPTIONS options,DWRITE_MEASURING_MODE measuring_mode) {
    This->lpVtbl->DrawText(This,string,string_len,text_format,layout_rect,brush,options,measuring_mode);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawTextLayout(ID2D1DeviceContext2* This,D2D1_POINT_2F origin,IDWriteTextLayout *layout,ID2D1Brush *brush,D2D1_DRAW_TEXT_OPTIONS options) {
    This->lpVtbl->DrawTextLayout(This,origin,layout,brush,options);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SetTransform(ID2D1DeviceContext2* This,const D2D1_MATRIX_3X2_F *transform) {
    This->lpVtbl->SetTransform(This,transform);
}
static __WIDL_INLINE void ID2D1DeviceContext2_GetTransform(ID2D1DeviceContext2* This,D2D1_MATRIX_3X2_F *transform) {
    This->lpVtbl->GetTransform(This,transform);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SetAntialiasMode(ID2D1DeviceContext2* This,D2D1_ANTIALIAS_MODE antialias_mode) {
    This->lpVtbl->SetAntialiasMode(This,antialias_mode);
}
static __WIDL_INLINE D2D1_ANTIALIAS_MODE ID2D1DeviceContext2_GetAntialiasMode(ID2D1DeviceContext2* This) {
    return This->lpVtbl->GetAntialiasMode(This);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SetTextAntialiasMode(ID2D1DeviceContext2* This,D2D1_TEXT_ANTIALIAS_MODE antialias_mode) {
    This->lpVtbl->SetTextAntialiasMode(This,antialias_mode);
}
static __WIDL_INLINE D2D1_TEXT_ANTIALIAS_MODE ID2D1DeviceContext2_GetTextAntialiasMode(ID2D1DeviceContext2* This) {
    return This->lpVtbl->GetTextAntialiasMode(This);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SetTextRenderingParams(ID2D1DeviceContext2* This,IDWriteRenderingParams *text_rendering_params) {
    This->lpVtbl->SetTextRenderingParams(This,text_rendering_params);
}
static __WIDL_INLINE void ID2D1DeviceContext2_GetTextRenderingParams(ID2D1DeviceContext2* This,IDWriteRenderingParams **text_rendering_params) {
    This->lpVtbl->GetTextRenderingParams(This,text_rendering_params);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SetTags(ID2D1DeviceContext2* This,D2D1_TAG tag1,D2D1_TAG tag2) {
    This->lpVtbl->SetTags(This,tag1,tag2);
}
static __WIDL_INLINE void ID2D1DeviceContext2_GetTags(ID2D1DeviceContext2* This,D2D1_TAG *tag1,D2D1_TAG *tag2) {
    This->lpVtbl->GetTags(This,tag1,tag2);
}
static __WIDL_INLINE void ID2D1DeviceContext2_PopLayer(ID2D1DeviceContext2* This) {
    This->lpVtbl->PopLayer(This);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_Flush(ID2D1DeviceContext2* This,D2D1_TAG *tag1,D2D1_TAG *tag2) {
    return This->lpVtbl->Flush(This,tag1,tag2);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SaveDrawingState(ID2D1DeviceContext2* This,ID2D1DrawingStateBlock *state_block) {
    This->lpVtbl->SaveDrawingState(This,state_block);
}
static __WIDL_INLINE void ID2D1DeviceContext2_RestoreDrawingState(ID2D1DeviceContext2* This,ID2D1DrawingStateBlock *state_block) {
    This->lpVtbl->RestoreDrawingState(This,state_block);
}
static __WIDL_INLINE void ID2D1DeviceContext2_PushAxisAlignedClip(ID2D1DeviceContext2* This,const D2D1_RECT_F *clip_rect,D2D1_ANTIALIAS_MODE antialias_mode) {
    This->lpVtbl->PushAxisAlignedClip(This,clip_rect,antialias_mode);
}
static __WIDL_INLINE void ID2D1DeviceContext2_PopAxisAlignedClip(ID2D1DeviceContext2* This) {
    This->lpVtbl->PopAxisAlignedClip(This);
}
static __WIDL_INLINE void ID2D1DeviceContext2_Clear(ID2D1DeviceContext2* This,const D2D1_COLOR_F *color) {
    This->lpVtbl->Clear(This,color);
}
static __WIDL_INLINE void ID2D1DeviceContext2_BeginDraw(ID2D1DeviceContext2* This) {
    This->lpVtbl->BeginDraw(This);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_EndDraw(ID2D1DeviceContext2* This,D2D1_TAG *tag1,D2D1_TAG *tag2) {
    return This->lpVtbl->EndDraw(This,tag1,tag2);
}
static __WIDL_INLINE D2D1_PIXEL_FORMAT ID2D1DeviceContext2_GetPixelFormat(ID2D1DeviceContext2* This) {
    D2D1_PIXEL_FORMAT __ret;
    return *This->lpVtbl->GetPixelFormat(This,&__ret);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SetDpi(ID2D1DeviceContext2* This,float dpi_x,float dpi_y) {
    This->lpVtbl->SetDpi(This,dpi_x,dpi_y);
}
static __WIDL_INLINE void ID2D1DeviceContext2_GetDpi(ID2D1DeviceContext2* This,float *dpi_x,float *dpi_y) {
    This->lpVtbl->GetDpi(This,dpi_x,dpi_y);
}
static __WIDL_INLINE D2D1_SIZE_F ID2D1DeviceContext2_GetSize(ID2D1DeviceContext2* This) {
    D2D1_SIZE_F __ret;
    return *This->lpVtbl->GetSize(This,&__ret);
}
static __WIDL_INLINE D2D1_SIZE_U ID2D1DeviceContext2_GetPixelSize(ID2D1DeviceContext2* This) {
    D2D1_SIZE_U __ret;
    return *This->lpVtbl->GetPixelSize(This,&__ret);
}
static __WIDL_INLINE UINT32 ID2D1DeviceContext2_GetMaximumBitmapSize(ID2D1DeviceContext2* This) {
    return This->lpVtbl->GetMaximumBitmapSize(This);
}
static __WIDL_INLINE BOOL ID2D1DeviceContext2_IsSupported(ID2D1DeviceContext2* This,const D2D1_RENDER_TARGET_PROPERTIES *desc) {
    return This->lpVtbl->IsSupported(This,desc);
}
/*** ID2D1DeviceContext methods ***/
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateBitmap(ID2D1DeviceContext2* This,D2D1_SIZE_U size,const void *src_data,UINT32 pitch,const D2D1_BITMAP_PROPERTIES1 *desc,ID2D1Bitmap1 **bitmap) {
    return This->lpVtbl->ID2D1DeviceContext_CreateBitmap(This,size,src_data,pitch,desc,bitmap);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateBitmapFromWicBitmap(ID2D1DeviceContext2* This,IWICBitmapSource *bitmap_source,const D2D1_BITMAP_PROPERTIES1 *desc,ID2D1Bitmap1 **bitmap) {
    return This->lpVtbl->ID2D1DeviceContext_CreateBitmapFromWicBitmap(This,bitmap_source,desc,bitmap);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateColorContext(ID2D1DeviceContext2* This,D2D1_COLOR_SPACE space,const BYTE *profile,UINT32 profile_size,ID2D1ColorContext **color_context) {
    return This->lpVtbl->CreateColorContext(This,space,profile,profile_size,color_context);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateColorContextFromFilename(ID2D1DeviceContext2* This,const WCHAR *filename,ID2D1ColorContext **color_context) {
    return This->lpVtbl->CreateColorContextFromFilename(This,filename,color_context);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateColorContextFromWicColorContext(ID2D1DeviceContext2* This,IWICColorContext *wic_color_context,ID2D1ColorContext **color_context) {
    return This->lpVtbl->CreateColorContextFromWicColorContext(This,wic_color_context,color_context);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateBitmapFromDxgiSurface(ID2D1DeviceContext2* This,IDXGISurface *surface,const D2D1_BITMAP_PROPERTIES1 *desc,ID2D1Bitmap1 **bitmap) {
    return This->lpVtbl->CreateBitmapFromDxgiSurface(This,surface,desc,bitmap);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateEffect(ID2D1DeviceContext2* This,REFCLSID effect_id,ID2D1Effect **effect) {
    return This->lpVtbl->CreateEffect(This,effect_id,effect);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateGradientStopCollection(ID2D1DeviceContext2* This,const D2D1_GRADIENT_STOP *stops,UINT32 stop_count,D2D1_COLOR_SPACE preinterpolation_space,D2D1_COLOR_SPACE postinterpolation_space,D2D1_BUFFER_PRECISION buffer_precision,D2D1_EXTEND_MODE extend_mode,D2D1_COLOR_INTERPOLATION_MODE color_interpolation_mode,ID2D1GradientStopCollection1 **gradient) {
    return This->lpVtbl->ID2D1DeviceContext_CreateGradientStopCollection(This,stops,stop_count,preinterpolation_space,postinterpolation_space,buffer_precision,extend_mode,color_interpolation_mode,gradient);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateImageBrush(ID2D1DeviceContext2* This,ID2D1Image *image,const D2D1_IMAGE_BRUSH_PROPERTIES *image_brush_desc,const D2D1_BRUSH_PROPERTIES *brush_desc,ID2D1ImageBrush **brush) {
    return This->lpVtbl->CreateImageBrush(This,image,image_brush_desc,brush_desc,brush);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateBitmapBrush(ID2D1DeviceContext2* This,ID2D1Bitmap *bitmap,const D2D1_BITMAP_BRUSH_PROPERTIES1 *bitmap_brush_desc,const D2D1_BRUSH_PROPERTIES *brush_desc,ID2D1BitmapBrush1 **bitmap_brush) {
    return This->lpVtbl->ID2D1DeviceContext_CreateBitmapBrush(This,bitmap,bitmap_brush_desc,brush_desc,bitmap_brush);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateCommandList(ID2D1DeviceContext2* This,ID2D1CommandList **command_list) {
    return This->lpVtbl->CreateCommandList(This,command_list);
}
static __WIDL_INLINE BOOL ID2D1DeviceContext2_IsDxgiFormatSupported(ID2D1DeviceContext2* This,DXGI_FORMAT format) {
    return This->lpVtbl->IsDxgiFormatSupported(This,format);
}
static __WIDL_INLINE BOOL ID2D1DeviceContext2_IsBufferPrecisionSupported(ID2D1DeviceContext2* This,D2D1_BUFFER_PRECISION buffer_precision) {
    return This->lpVtbl->IsBufferPrecisionSupported(This,buffer_precision);
}
static __WIDL_INLINE void ID2D1DeviceContext2_GetImageLocalBounds(ID2D1DeviceContext2* This,ID2D1Image *image,D2D1_RECT_F *local_bounds) {
    This->lpVtbl->GetImageLocalBounds(This,image,local_bounds);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_GetImageWorldBounds(ID2D1DeviceContext2* This,ID2D1Image *image,D2D1_RECT_F *world_bounds) {
    return This->lpVtbl->GetImageWorldBounds(This,image,world_bounds);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_GetGlyphRunWorldBounds(ID2D1DeviceContext2* This,D2D1_POINT_2F baseline_origin,const DWRITE_GLYPH_RUN *glyph_run,DWRITE_MEASURING_MODE measuring_mode,D2D1_RECT_F *bounds) {
    return This->lpVtbl->GetGlyphRunWorldBounds(This,baseline_origin,glyph_run,measuring_mode,bounds);
}
static __WIDL_INLINE void ID2D1DeviceContext2_GetDevice(ID2D1DeviceContext2* This,ID2D1Device **device) {
    This->lpVtbl->GetDevice(This,device);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SetTarget(ID2D1DeviceContext2* This,ID2D1Image *target) {
    This->lpVtbl->SetTarget(This,target);
}
static __WIDL_INLINE void ID2D1DeviceContext2_GetTarget(ID2D1DeviceContext2* This,ID2D1Image **target) {
    This->lpVtbl->GetTarget(This,target);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SetRenderingControls(ID2D1DeviceContext2* This,const D2D1_RENDERING_CONTROLS *rendering_controls) {
    This->lpVtbl->SetRenderingControls(This,rendering_controls);
}
static __WIDL_INLINE void ID2D1DeviceContext2_GetRenderingControls(ID2D1DeviceContext2* This,D2D1_RENDERING_CONTROLS *rendering_controls) {
    This->lpVtbl->GetRenderingControls(This,rendering_controls);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SetPrimitiveBlend(ID2D1DeviceContext2* This,D2D1_PRIMITIVE_BLEND primitive_blend) {
    This->lpVtbl->SetPrimitiveBlend(This,primitive_blend);
}
static __WIDL_INLINE D2D1_PRIMITIVE_BLEND ID2D1DeviceContext2_GetPrimitiveBlend(ID2D1DeviceContext2* This) {
    return This->lpVtbl->GetPrimitiveBlend(This);
}
static __WIDL_INLINE void ID2D1DeviceContext2_SetUnitMode(ID2D1DeviceContext2* This,D2D1_UNIT_MODE unit_mode) {
    This->lpVtbl->SetUnitMode(This,unit_mode);
}
static __WIDL_INLINE D2D1_UNIT_MODE ID2D1DeviceContext2_GetUnitMode(ID2D1DeviceContext2* This) {
    return This->lpVtbl->GetUnitMode(This);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawGlyphRun(ID2D1DeviceContext2* This,D2D1_POINT_2F baseline_origin,const DWRITE_GLYPH_RUN *glyph_run,const DWRITE_GLYPH_RUN_DESCRIPTION *glyph_run_desc,ID2D1Brush *brush,DWRITE_MEASURING_MODE measuring_mode) {
    This->lpVtbl->ID2D1DeviceContext_DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawImage(ID2D1DeviceContext2* This,ID2D1Image *image,const D2D1_POINT_2F *target_offset,const D2D1_RECT_F *image_rect,D2D1_INTERPOLATION_MODE interpolation_mode,D2D1_COMPOSITE_MODE composite_mode) {
    This->lpVtbl->DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawBitmap(ID2D1DeviceContext2* This,ID2D1Bitmap *bitmap,const D2D1_RECT_F *dst_rect,float opacity,D2D1_INTERPOLATION_MODE interpolation_mode,const D2D1_RECT_F *src_rect,const D2D1_MATRIX_4X4_F *perspective_transform) {
    This->lpVtbl->ID2D1DeviceContext_DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform);
}
static __WIDL_INLINE void ID2D1DeviceContext2_PushLayer(ID2D1DeviceContext2* This,const D2D1_LAYER_PARAMETERS1 *layer_parameters,ID2D1Layer *layer) {
    This->lpVtbl->ID2D1DeviceContext_PushLayer(This,layer_parameters,layer);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_InvalidateEffectInputRectangle(ID2D1DeviceContext2* This,ID2D1Effect *effect,UINT32 input,const D2D1_RECT_F *input_rect) {
    return This->lpVtbl->InvalidateEffectInputRectangle(This,effect,input,input_rect);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_GetEffectInvalidRectangleCount(ID2D1DeviceContext2* This,ID2D1Effect *effect,UINT32 *rect_count) {
    return This->lpVtbl->GetEffectInvalidRectangleCount(This,effect,rect_count);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_GetEffectInvalidRectangles(ID2D1DeviceContext2* This,ID2D1Effect *effect,D2D1_RECT_F *rectangles,UINT32 rect_count) {
    return This->lpVtbl->GetEffectInvalidRectangles(This,effect,rectangles,rect_count);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_GetEffectRequiredInputRectangles(ID2D1DeviceContext2* This,ID2D1Effect *effect,const D2D1_RECT_F *image_rect,const D2D1_EFFECT_INPUT_DESCRIPTION *desc,D2D1_RECT_F *input_rect,UINT32 input_count) {
    return This->lpVtbl->GetEffectRequiredInputRectangles(This,effect,image_rect,desc,input_rect,input_count);
}
static __WIDL_INLINE void ID2D1DeviceContext2_FillOpacityMask(ID2D1DeviceContext2* This,ID2D1Bitmap *mask,ID2D1Brush *brush,const D2D1_RECT_F *dst_rect,const D2D1_RECT_F *src_rect) {
    This->lpVtbl->ID2D1DeviceContext_FillOpacityMask(This,mask,brush,dst_rect,src_rect);
}
/*** ID2D1DeviceContext1 methods ***/
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateFilledGeometryRealization(ID2D1DeviceContext2* This,ID2D1Geometry *geometry,float tolerance,ID2D1GeometryRealization **realization) {
    return This->lpVtbl->CreateFilledGeometryRealization(This,geometry,tolerance,realization);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateStrokedGeometryRealization(ID2D1DeviceContext2* This,ID2D1Geometry *geometry,float tolerance,float stroke_width,ID2D1StrokeStyle *stroke_style,ID2D1GeometryRealization **realization) {
    return This->lpVtbl->CreateStrokedGeometryRealization(This,geometry,tolerance,stroke_width,stroke_style,realization);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawGeometryRealization(ID2D1DeviceContext2* This,ID2D1GeometryRealization *realization,ID2D1Brush *brush) {
    This->lpVtbl->DrawGeometryRealization(This,realization,brush);
}
/*** ID2D1DeviceContext2 methods ***/
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateInk(ID2D1DeviceContext2* This,const D2D1_INK_POINT *start_point,ID2D1Ink **ink) {
    return This->lpVtbl->CreateInk(This,start_point,ink);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateInkStyle(ID2D1DeviceContext2* This,const D2D1_INK_STYLE_PROPERTIES *ink_style_properties,ID2D1InkStyle **ink_style) {
    return This->lpVtbl->CreateInkStyle(This,ink_style_properties,ink_style);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateGradientMesh(ID2D1DeviceContext2* This,const D2D1_GRADIENT_MESH_PATCH *patches,UINT32 patches_count,ID2D1GradientMesh **gradient_mesh) {
    return This->lpVtbl->CreateGradientMesh(This,patches,patches_count,gradient_mesh);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateImageSourceFromWic(ID2D1DeviceContext2* This,IWICBitmapSource *wic_bitmap_source,D2D1_IMAGE_SOURCE_LOADING_OPTIONS loading_options,D2D1_ALPHA_MODE alpha_mode,ID2D1ImageSourceFromWic **image_source) {
    return This->lpVtbl->CreateImageSourceFromWic(This,wic_bitmap_source,loading_options,alpha_mode,image_source);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateLookupTable3D(ID2D1DeviceContext2* This,D2D1_BUFFER_PRECISION precision,const UINT32 *extents,const BYTE *data,UINT32 data_count,const UINT32 *strides,ID2D1LookupTable3D **lookup_table) {
    return This->lpVtbl->CreateLookupTable3D(This,precision,extents,data,data_count,strides,lookup_table);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateImageSourceFromDxgi(ID2D1DeviceContext2* This,IDXGISurface **surfaces,UINT32 surface_count,DXGI_COLOR_SPACE_TYPE color_space,D2D1_IMAGE_SOURCE_FROM_DXGI_OPTIONS options,ID2D1ImageSource **image_source) {
    return This->lpVtbl->CreateImageSourceFromDxgi(This,surfaces,surface_count,color_space,options,image_source);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_GetGradientMeshWorldBounds(ID2D1DeviceContext2* This,ID2D1GradientMesh *gradient_mesh,D2D1_RECT_F *bounds) {
    return This->lpVtbl->GetGradientMeshWorldBounds(This,gradient_mesh,bounds);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawInk(ID2D1DeviceContext2* This,ID2D1Ink *ink,ID2D1Brush *brush,ID2D1InkStyle *ink_style) {
    This->lpVtbl->DrawInk(This,ink,brush,ink_style);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawGradientMesh(ID2D1DeviceContext2* This,ID2D1GradientMesh *gradient_mesh) {
    This->lpVtbl->DrawGradientMesh(This,gradient_mesh);
}
static __WIDL_INLINE void ID2D1DeviceContext2_DrawGdiMetafile(ID2D1DeviceContext2* This,ID2D1GdiMetafile *gdi_metafile,const D2D1_RECT_F *dst_rect,const D2D1_RECT_F *src_rect) {
    This->lpVtbl->ID2D1DeviceContext2_DrawGdiMetafile(This,gdi_metafile,dst_rect,src_rect);
}
static __WIDL_INLINE HRESULT ID2D1DeviceContext2_CreateTransformedImageSource(ID2D1DeviceContext2* This,ID2D1ImageSource *source,const D2D1_TRANSFORMED_IMAGE_SOURCE_PROPERTIES *props,ID2D1TransformedImageSource **transformed) {
    return This->lpVtbl->CreateTransformedImageSource(This,source,props,transformed);
}
#endif
#endif

#endif


#endif  /* __ID2D1DeviceContext2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1Device2 interface
 */
#ifndef __ID2D1Device2_INTERFACE_DEFINED__
#define __ID2D1Device2_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1Device2, 0xa44472e1, 0x8dfb, 0x4e60, 0x84,0x92, 0x6e,0x28,0x61,0xc9,0xca,0x8b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a44472e1-8dfb-4e60-8492-6e2861c9ca8b")
ID2D1Device2 : public ID2D1Device1
{
    virtual HRESULT STDMETHODCALLTYPE CreateDeviceContext(
        D2D1_DEVICE_CONTEXT_OPTIONS options,
        ID2D1DeviceContext2 **context) = 0;

    virtual void STDMETHODCALLTYPE FlushDeviceContexts(
        ID2D1Bitmap *bitmap) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetDxgiDevice(
        IDXGIDevice **dxgi_device) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1Device2, 0xa44472e1, 0x8dfb, 0x4e60, 0x84,0x92, 0x6e,0x28,0x61,0xc9,0xca,0x8b)
#endif
#else
typedef struct ID2D1Device2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1Device2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1Device2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1Device2 *This);

    /*** ID2D1Resource methods ***/
    void (STDMETHODCALLTYPE *GetFactory)(
        ID2D1Device2 *This,
        ID2D1Factory **factory);

    /*** ID2D1Device methods ***/
    HRESULT (STDMETHODCALLTYPE *CreateDeviceContext)(
        ID2D1Device2 *This,
        D2D1_DEVICE_CONTEXT_OPTIONS options,
        ID2D1DeviceContext **context);

    HRESULT (STDMETHODCALLTYPE *CreatePrintControl)(
        ID2D1Device2 *This,
        IWICImagingFactory *wic_factory,
        IPrintDocumentPackageTarget *document_target,
        const D2D1_PRINT_CONTROL_PROPERTIES *desc,
        ID2D1PrintControl **print_control);

    void (STDMETHODCALLTYPE *SetMaximumTextureMemory)(
        ID2D1Device2 *This,
        UINT64 max_texture_memory);

    UINT64 (STDMETHODCALLTYPE *GetMaximumTextureMemory)(
        ID2D1Device2 *This);

    HRESULT (STDMETHODCALLTYPE *ClearResources)(
        ID2D1Device2 *This,
        UINT msec_since_use);

    /*** ID2D1Device1 methods ***/
    D2D1_RENDERING_PRIORITY (STDMETHODCALLTYPE *GetRenderingPriority)(
        ID2D1Device2 *This);

    void (STDMETHODCALLTYPE *SetRenderingPriority)(
        ID2D1Device2 *This,
        D2D1_RENDERING_PRIORITY priority);

    HRESULT (STDMETHODCALLTYPE *ID2D1Device1_CreateDeviceContext)(
        ID2D1Device2 *This,
        D2D1_DEVICE_CONTEXT_OPTIONS options,
        ID2D1DeviceContext1 **device_context);

    /*** ID2D1Device2 methods ***/
    HRESULT (STDMETHODCALLTYPE *ID2D1Device2_CreateDeviceContext)(
        ID2D1Device2 *This,
        D2D1_DEVICE_CONTEXT_OPTIONS options,
        ID2D1DeviceContext2 **context);

    void (STDMETHODCALLTYPE *FlushDeviceContexts)(
        ID2D1Device2 *This,
        ID2D1Bitmap *bitmap);

    HRESULT (STDMETHODCALLTYPE *GetDxgiDevice)(
        ID2D1Device2 *This,
        IDXGIDevice **dxgi_device);

    END_INTERFACE
} ID2D1Device2Vtbl;

interface ID2D1Device2 {
    CONST_VTBL ID2D1Device2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1Device2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1Device2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1Device2_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1Resource methods ***/
#define ID2D1Device2_GetFactory(This,factory) (This)->lpVtbl->GetFactory(This,factory)
/*** ID2D1Device methods ***/
#define ID2D1Device2_CreatePrintControl(This,wic_factory,document_target,desc,print_control) (This)->lpVtbl->CreatePrintControl(This,wic_factory,document_target,desc,print_control)
#define ID2D1Device2_SetMaximumTextureMemory(This,max_texture_memory) (This)->lpVtbl->SetMaximumTextureMemory(This,max_texture_memory)
#define ID2D1Device2_GetMaximumTextureMemory(This) (This)->lpVtbl->GetMaximumTextureMemory(This)
#define ID2D1Device2_ClearResources(This,msec_since_use) (This)->lpVtbl->ClearResources(This,msec_since_use)
/*** ID2D1Device1 methods ***/
#define ID2D1Device2_GetRenderingPriority(This) (This)->lpVtbl->GetRenderingPriority(This)
#define ID2D1Device2_SetRenderingPriority(This,priority) (This)->lpVtbl->SetRenderingPriority(This,priority)
/*** ID2D1Device2 methods ***/
#define ID2D1Device2_CreateDeviceContext(This,options,context) (This)->lpVtbl->ID2D1Device2_CreateDeviceContext(This,options,context)
#define ID2D1Device2_FlushDeviceContexts(This,bitmap) (This)->lpVtbl->FlushDeviceContexts(This,bitmap)
#define ID2D1Device2_GetDxgiDevice(This,dxgi_device) (This)->lpVtbl->GetDxgiDevice(This,dxgi_device)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1Device2_QueryInterface(ID2D1Device2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1Device2_AddRef(ID2D1Device2* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1Device2_Release(ID2D1Device2* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1Resource methods ***/
static __WIDL_INLINE void ID2D1Device2_GetFactory(ID2D1Device2* This,ID2D1Factory **factory) {
    This->lpVtbl->GetFactory(This,factory);
}
/*** ID2D1Device methods ***/
static __WIDL_INLINE HRESULT ID2D1Device2_CreatePrintControl(ID2D1Device2* This,IWICImagingFactory *wic_factory,IPrintDocumentPackageTarget *document_target,const D2D1_PRINT_CONTROL_PROPERTIES *desc,ID2D1PrintControl **print_control) {
    return This->lpVtbl->CreatePrintControl(This,wic_factory,document_target,desc,print_control);
}
static __WIDL_INLINE void ID2D1Device2_SetMaximumTextureMemory(ID2D1Device2* This,UINT64 max_texture_memory) {
    This->lpVtbl->SetMaximumTextureMemory(This,max_texture_memory);
}
static __WIDL_INLINE UINT64 ID2D1Device2_GetMaximumTextureMemory(ID2D1Device2* This) {
    return This->lpVtbl->GetMaximumTextureMemory(This);
}
static __WIDL_INLINE HRESULT ID2D1Device2_ClearResources(ID2D1Device2* This,UINT msec_since_use) {
    return This->lpVtbl->ClearResources(This,msec_since_use);
}
/*** ID2D1Device1 methods ***/
static __WIDL_INLINE D2D1_RENDERING_PRIORITY ID2D1Device2_GetRenderingPriority(ID2D1Device2* This) {
    return This->lpVtbl->GetRenderingPriority(This);
}
static __WIDL_INLINE void ID2D1Device2_SetRenderingPriority(ID2D1Device2* This,D2D1_RENDERING_PRIORITY priority) {
    This->lpVtbl->SetRenderingPriority(This,priority);
}
/*** ID2D1Device2 methods ***/
static __WIDL_INLINE HRESULT ID2D1Device2_CreateDeviceContext(ID2D1Device2* This,D2D1_DEVICE_CONTEXT_OPTIONS options,ID2D1DeviceContext2 **context) {
    return This->lpVtbl->ID2D1Device2_CreateDeviceContext(This,options,context);
}
static __WIDL_INLINE void ID2D1Device2_FlushDeviceContexts(ID2D1Device2* This,ID2D1Bitmap *bitmap) {
    This->lpVtbl->FlushDeviceContexts(This,bitmap);
}
static __WIDL_INLINE HRESULT ID2D1Device2_GetDxgiDevice(ID2D1Device2* This,IDXGIDevice **dxgi_device) {
    return This->lpVtbl->GetDxgiDevice(This,dxgi_device);
}
#endif
#endif

#endif


#endif  /* __ID2D1Device2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1Factory3 interface
 */
#ifndef __ID2D1Factory3_INTERFACE_DEFINED__
#define __ID2D1Factory3_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1Factory3, 0x0869759f, 0x4f00, 0x413f, 0xb0,0x3e, 0x2b,0xda,0x45,0x40,0x4d,0x0f);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("0869759f-4f00-413f-b03e-2bda45404d0f")
ID2D1Factory3 : public ID2D1Factory2
{
    virtual HRESULT STDMETHODCALLTYPE CreateDevice(
        IDXGIDevice *dxgi_device,
        ID2D1Device2 **d2d_device) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1Factory3, 0x0869759f, 0x4f00, 0x413f, 0xb0,0x3e, 0x2b,0xda,0x45,0x40,0x4d,0x0f)
#endif
#else
typedef struct ID2D1Factory3Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1Factory3 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1Factory3 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1Factory3 *This);

    /*** ID2D1Factory methods ***/
    HRESULT (STDMETHODCALLTYPE *ReloadSystemMetrics)(
        ID2D1Factory3 *This);

    void (STDMETHODCALLTYPE *GetDesktopDpi)(
        ID2D1Factory3 *This,
        float *dpi_x,
        float *dpi_y);

    HRESULT (STDMETHODCALLTYPE *CreateRectangleGeometry)(
        ID2D1Factory3 *This,
        const D2D1_RECT_F *rect,
        ID2D1RectangleGeometry **geometry);

    HRESULT (STDMETHODCALLTYPE *CreateRoundedRectangleGeometry)(
        ID2D1Factory3 *This,
        const D2D1_ROUNDED_RECT *rect,
        ID2D1RoundedRectangleGeometry **geometry);

    HRESULT (STDMETHODCALLTYPE *CreateEllipseGeometry)(
        ID2D1Factory3 *This,
        const D2D1_ELLIPSE *ellipse,
        ID2D1EllipseGeometry **geometry);

    HRESULT (STDMETHODCALLTYPE *CreateGeometryGroup)(
        ID2D1Factory3 *This,
        D2D1_FILL_MODE fill_mode,
        ID2D1Geometry **geometries,
        UINT32 geometry_count,
        ID2D1GeometryGroup **group);

    HRESULT (STDMETHODCALLTYPE *CreateTransformedGeometry)(
        ID2D1Factory3 *This,
        ID2D1Geometry *src_geometry,
        const D2D1_MATRIX_3X2_F *transform,
        ID2D1TransformedGeometry **transformed_geometry);

    HRESULT (STDMETHODCALLTYPE *CreatePathGeometry)(
        ID2D1Factory3 *This,
        ID2D1PathGeometry **geometry);

    HRESULT (STDMETHODCALLTYPE *CreateStrokeStyle)(
        ID2D1Factory3 *This,
        const D2D1_STROKE_STYLE_PROPERTIES *desc,
        const float *dashes,
        UINT32 dash_count,
        ID2D1StrokeStyle **stroke_style);

    HRESULT (STDMETHODCALLTYPE *CreateDrawingStateBlock)(
        ID2D1Factory3 *This,
        const D2D1_DRAWING_STATE_DESCRIPTION *desc,
        IDWriteRenderingParams *text_rendering_params,
        ID2D1DrawingStateBlock **state_block);

    HRESULT (STDMETHODCALLTYPE *CreateWicBitmapRenderTarget)(
        ID2D1Factory3 *This,
        IWICBitmap *target,
        const D2D1_RENDER_TARGET_PROPERTIES *desc,
        ID2D1RenderTarget **render_target);

    HRESULT (STDMETHODCALLTYPE *CreateHwndRenderTarget)(
        ID2D1Factory3 *This,
        const D2D1_RENDER_TARGET_PROPERTIES *desc,
        const D2D1_HWND_RENDER_TARGET_PROPERTIES *hwnd_rt_desc,
        ID2D1HwndRenderTarget **render_target);

    HRESULT (STDMETHODCALLTYPE *CreateDxgiSurfaceRenderTarget)(
        ID2D1Factory3 *This,
        IDXGISurface *surface,
        const D2D1_RENDER_TARGET_PROPERTIES *desc,
        ID2D1RenderTarget **render_target);

    HRESULT (STDMETHODCALLTYPE *CreateDCRenderTarget)(
        ID2D1Factory3 *This,
        const D2D1_RENDER_TARGET_PROPERTIES *desc,
        ID2D1DCRenderTarget **render_target);

    /*** ID2D1Factory1 methods ***/
    HRESULT (STDMETHODCALLTYPE *CreateDevice)(
        ID2D1Factory3 *This,
        IDXGIDevice *dxgi_device,
        ID2D1Device **device);

    HRESULT (STDMETHODCALLTYPE *ID2D1Factory1_CreateStrokeStyle)(
        ID2D1Factory3 *This,
        const D2D1_STROKE_STYLE_PROPERTIES1 *desc,
        const float *dashes,
        UINT32 dash_count,
        ID2D1StrokeStyle1 **stroke_style);

    HRESULT (STDMETHODCALLTYPE *ID2D1Factory1_CreatePathGeometry)(
        ID2D1Factory3 *This,
        ID2D1PathGeometry1 **geometry);

    HRESULT (STDMETHODCALLTYPE *ID2D1Factory1_CreateDrawingStateBlock)(
        ID2D1Factory3 *This,
        const D2D1_DRAWING_STATE_DESCRIPTION1 *desc,
        IDWriteRenderingParams *text_rendering_params,
        ID2D1DrawingStateBlock1 **state_block);

    HRESULT (STDMETHODCALLTYPE *CreateGdiMetafile)(
        ID2D1Factory3 *This,
        IStream *stream,
        ID2D1GdiMetafile **metafile);

    HRESULT (STDMETHODCALLTYPE *RegisterEffectFromStream)(
        ID2D1Factory3 *This,
        REFCLSID effect_id,
        IStream *property_xml,
        const D2D1_PROPERTY_BINDING *bindings,
        UINT32 binding_count,
        PD2D1_EFFECT_FACTORY effect_factory);

    HRESULT (STDMETHODCALLTYPE *RegisterEffectFromString)(
        ID2D1Factory3 *This,
        REFCLSID effect_id,
        const WCHAR *property_xml,
        const D2D1_PROPERTY_BINDING *bindings,
        UINT32 binding_count,
        PD2D1_EFFECT_FACTORY effect_factory);

    HRESULT (STDMETHODCALLTYPE *UnregisterEffect)(
        ID2D1Factory3 *This,
        REFCLSID effect_id);

    HRESULT (STDMETHODCALLTYPE *GetRegisteredEffects)(
        ID2D1Factory3 *This,
        CLSID *effects,
        UINT32 effect_count,
        UINT32 *returned,
        UINT32 *registered);

    HRESULT (STDMETHODCALLTYPE *GetEffectProperties)(
        ID2D1Factory3 *This,
        REFCLSID effect_id,
        ID2D1Properties **props);

    /*** ID2D1Factory2 methods ***/
    HRESULT (STDMETHODCALLTYPE *ID2D1Factory2_CreateDevice)(
        ID2D1Factory3 *This,
        IDXGIDevice *dxgi_device,
        ID2D1Device1 **device);

    /*** ID2D1Factory3 methods ***/
    HRESULT (STDMETHODCALLTYPE *ID2D1Factory3_CreateDevice)(
        ID2D1Factory3 *This,
        IDXGIDevice *dxgi_device,
        ID2D1Device2 **d2d_device);

    END_INTERFACE
} ID2D1Factory3Vtbl;

interface ID2D1Factory3 {
    CONST_VTBL ID2D1Factory3Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1Factory3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1Factory3_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1Factory3_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1Factory methods ***/
#define ID2D1Factory3_ReloadSystemMetrics(This) (This)->lpVtbl->ReloadSystemMetrics(This)
#define ID2D1Factory3_GetDesktopDpi(This,dpi_x,dpi_y) (This)->lpVtbl->GetDesktopDpi(This,dpi_x,dpi_y)
#define ID2D1Factory3_CreateRectangleGeometry(This,rect,geometry) (This)->lpVtbl->CreateRectangleGeometry(This,rect,geometry)
#define ID2D1Factory3_CreateRoundedRectangleGeometry(This,rect,geometry) (This)->lpVtbl->CreateRoundedRectangleGeometry(This,rect,geometry)
#define ID2D1Factory3_CreateEllipseGeometry(This,ellipse,geometry) (This)->lpVtbl->CreateEllipseGeometry(This,ellipse,geometry)
#define ID2D1Factory3_CreateGeometryGroup(This,fill_mode,geometries,geometry_count,group) (This)->lpVtbl->CreateGeometryGroup(This,fill_mode,geometries,geometry_count,group)
#define ID2D1Factory3_CreateTransformedGeometry(This,src_geometry,transform,transformed_geometry) (This)->lpVtbl->CreateTransformedGeometry(This,src_geometry,transform,transformed_geometry)
#define ID2D1Factory3_CreateWicBitmapRenderTarget(This,target,desc,render_target) (This)->lpVtbl->CreateWicBitmapRenderTarget(This,target,desc,render_target)
#define ID2D1Factory3_CreateHwndRenderTarget(This,desc,hwnd_rt_desc,render_target) (This)->lpVtbl->CreateHwndRenderTarget(This,desc,hwnd_rt_desc,render_target)
#define ID2D1Factory3_CreateDxgiSurfaceRenderTarget(This,surface,desc,render_target) (This)->lpVtbl->CreateDxgiSurfaceRenderTarget(This,surface,desc,render_target)
#define ID2D1Factory3_CreateDCRenderTarget(This,desc,render_target) (This)->lpVtbl->CreateDCRenderTarget(This,desc,render_target)
/*** ID2D1Factory1 methods ***/
#define ID2D1Factory3_CreateStrokeStyle(This,desc,dashes,dash_count,stroke_style) (This)->lpVtbl->ID2D1Factory1_CreateStrokeStyle(This,desc,dashes,dash_count,stroke_style)
#define ID2D1Factory3_CreatePathGeometry(This,geometry) (This)->lpVtbl->ID2D1Factory1_CreatePathGeometry(This,geometry)
#define ID2D1Factory3_CreateDrawingStateBlock(This,desc,text_rendering_params,state_block) (This)->lpVtbl->ID2D1Factory1_CreateDrawingStateBlock(This,desc,text_rendering_params,state_block)
#define ID2D1Factory3_CreateGdiMetafile(This,stream,metafile) (This)->lpVtbl->CreateGdiMetafile(This,stream,metafile)
#define ID2D1Factory3_RegisterEffectFromStream(This,effect_id,property_xml,bindings,binding_count,effect_factory) (This)->lpVtbl->RegisterEffectFromStream(This,effect_id,property_xml,bindings,binding_count,effect_factory)
#define ID2D1Factory3_RegisterEffectFromString(This,effect_id,property_xml,bindings,binding_count,effect_factory) (This)->lpVtbl->RegisterEffectFromString(This,effect_id,property_xml,bindings,binding_count,effect_factory)
#define ID2D1Factory3_UnregisterEffect(This,effect_id) (This)->lpVtbl->UnregisterEffect(This,effect_id)
#define ID2D1Factory3_GetRegisteredEffects(This,effects,effect_count,returned,registered) (This)->lpVtbl->GetRegisteredEffects(This,effects,effect_count,returned,registered)
#define ID2D1Factory3_GetEffectProperties(This,effect_id,props) (This)->lpVtbl->GetEffectProperties(This,effect_id,props)
/*** ID2D1Factory2 methods ***/
/*** ID2D1Factory3 methods ***/
#define ID2D1Factory3_CreateDevice(This,dxgi_device,d2d_device) (This)->lpVtbl->ID2D1Factory3_CreateDevice(This,dxgi_device,d2d_device)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1Factory3_QueryInterface(ID2D1Factory3* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1Factory3_AddRef(ID2D1Factory3* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1Factory3_Release(ID2D1Factory3* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1Factory methods ***/
static __WIDL_INLINE HRESULT ID2D1Factory3_ReloadSystemMetrics(ID2D1Factory3* This) {
    return This->lpVtbl->ReloadSystemMetrics(This);
}
static __WIDL_INLINE void ID2D1Factory3_GetDesktopDpi(ID2D1Factory3* This,float *dpi_x,float *dpi_y) {
    This->lpVtbl->GetDesktopDpi(This,dpi_x,dpi_y);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateRectangleGeometry(ID2D1Factory3* This,const D2D1_RECT_F *rect,ID2D1RectangleGeometry **geometry) {
    return This->lpVtbl->CreateRectangleGeometry(This,rect,geometry);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateRoundedRectangleGeometry(ID2D1Factory3* This,const D2D1_ROUNDED_RECT *rect,ID2D1RoundedRectangleGeometry **geometry) {
    return This->lpVtbl->CreateRoundedRectangleGeometry(This,rect,geometry);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateEllipseGeometry(ID2D1Factory3* This,const D2D1_ELLIPSE *ellipse,ID2D1EllipseGeometry **geometry) {
    return This->lpVtbl->CreateEllipseGeometry(This,ellipse,geometry);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateGeometryGroup(ID2D1Factory3* This,D2D1_FILL_MODE fill_mode,ID2D1Geometry **geometries,UINT32 geometry_count,ID2D1GeometryGroup **group) {
    return This->lpVtbl->CreateGeometryGroup(This,fill_mode,geometries,geometry_count,group);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateTransformedGeometry(ID2D1Factory3* This,ID2D1Geometry *src_geometry,const D2D1_MATRIX_3X2_F *transform,ID2D1TransformedGeometry **transformed_geometry) {
    return This->lpVtbl->CreateTransformedGeometry(This,src_geometry,transform,transformed_geometry);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateWicBitmapRenderTarget(ID2D1Factory3* This,IWICBitmap *target,const D2D1_RENDER_TARGET_PROPERTIES *desc,ID2D1RenderTarget **render_target) {
    return This->lpVtbl->CreateWicBitmapRenderTarget(This,target,desc,render_target);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateHwndRenderTarget(ID2D1Factory3* This,const D2D1_RENDER_TARGET_PROPERTIES *desc,const D2D1_HWND_RENDER_TARGET_PROPERTIES *hwnd_rt_desc,ID2D1HwndRenderTarget **render_target) {
    return This->lpVtbl->CreateHwndRenderTarget(This,desc,hwnd_rt_desc,render_target);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateDxgiSurfaceRenderTarget(ID2D1Factory3* This,IDXGISurface *surface,const D2D1_RENDER_TARGET_PROPERTIES *desc,ID2D1RenderTarget **render_target) {
    return This->lpVtbl->CreateDxgiSurfaceRenderTarget(This,surface,desc,render_target);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateDCRenderTarget(ID2D1Factory3* This,const D2D1_RENDER_TARGET_PROPERTIES *desc,ID2D1DCRenderTarget **render_target) {
    return This->lpVtbl->CreateDCRenderTarget(This,desc,render_target);
}
/*** ID2D1Factory1 methods ***/
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateStrokeStyle(ID2D1Factory3* This,const D2D1_STROKE_STYLE_PROPERTIES1 *desc,const float *dashes,UINT32 dash_count,ID2D1StrokeStyle1 **stroke_style) {
    return This->lpVtbl->ID2D1Factory1_CreateStrokeStyle(This,desc,dashes,dash_count,stroke_style);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreatePathGeometry(ID2D1Factory3* This,ID2D1PathGeometry1 **geometry) {
    return This->lpVtbl->ID2D1Factory1_CreatePathGeometry(This,geometry);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateDrawingStateBlock(ID2D1Factory3* This,const D2D1_DRAWING_STATE_DESCRIPTION1 *desc,IDWriteRenderingParams *text_rendering_params,ID2D1DrawingStateBlock1 **state_block) {
    return This->lpVtbl->ID2D1Factory1_CreateDrawingStateBlock(This,desc,text_rendering_params,state_block);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateGdiMetafile(ID2D1Factory3* This,IStream *stream,ID2D1GdiMetafile **metafile) {
    return This->lpVtbl->CreateGdiMetafile(This,stream,metafile);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_RegisterEffectFromStream(ID2D1Factory3* This,REFCLSID effect_id,IStream *property_xml,const D2D1_PROPERTY_BINDING *bindings,UINT32 binding_count,PD2D1_EFFECT_FACTORY effect_factory) {
    return This->lpVtbl->RegisterEffectFromStream(This,effect_id,property_xml,bindings,binding_count,effect_factory);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_RegisterEffectFromString(ID2D1Factory3* This,REFCLSID effect_id,const WCHAR *property_xml,const D2D1_PROPERTY_BINDING *bindings,UINT32 binding_count,PD2D1_EFFECT_FACTORY effect_factory) {
    return This->lpVtbl->RegisterEffectFromString(This,effect_id,property_xml,bindings,binding_count,effect_factory);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_UnregisterEffect(ID2D1Factory3* This,REFCLSID effect_id) {
    return This->lpVtbl->UnregisterEffect(This,effect_id);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_GetRegisteredEffects(ID2D1Factory3* This,CLSID *effects,UINT32 effect_count,UINT32 *returned,UINT32 *registered) {
    return This->lpVtbl->GetRegisteredEffects(This,effects,effect_count,returned,registered);
}
static __WIDL_INLINE HRESULT ID2D1Factory3_GetEffectProperties(ID2D1Factory3* This,REFCLSID effect_id,ID2D1Properties **props) {
    return This->lpVtbl->GetEffectProperties(This,effect_id,props);
}
/*** ID2D1Factory2 methods ***/
/*** ID2D1Factory3 methods ***/
static __WIDL_INLINE HRESULT ID2D1Factory3_CreateDevice(ID2D1Factory3* This,IDXGIDevice *dxgi_device,ID2D1Device2 **d2d_device) {
    return This->lpVtbl->ID2D1Factory3_CreateDevice(This,dxgi_device,d2d_device);
}
#endif
#endif

#endif


#endif  /* __ID2D1Factory3_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1CommandSink2 interface
 */
#ifndef __ID2D1CommandSink2_INTERFACE_DEFINED__
#define __ID2D1CommandSink2_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1CommandSink2, 0x3bab440e, 0x417e, 0x47df, 0xa2,0xe2, 0xbc,0x0b,0xe6,0xa0,0x09,0x16);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("3bab440e-417e-47df-a2e2-bc0be6a00916")
ID2D1CommandSink2 : public ID2D1CommandSink1
{
    virtual HRESULT STDMETHODCALLTYPE DrawInk(
        ID2D1Ink *ink,
        ID2D1Brush *brush,
        ID2D1InkStyle *ink_style) = 0;

    virtual HRESULT STDMETHODCALLTYPE DrawGradientMesh(
        ID2D1GradientMesh *gradient_mesh) = 0;

    virtual HRESULT STDMETHODCALLTYPE DrawGdiMetafile(
        ID2D1GdiMetafile *gdi_metafile,
        const D2D1_RECT_F *dest_rect,
        const D2D1_RECT_F *src_rect) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1CommandSink2, 0x3bab440e, 0x417e, 0x47df, 0xa2,0xe2, 0xbc,0x0b,0xe6,0xa0,0x09,0x16)
#endif
#else
typedef struct ID2D1CommandSink2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1CommandSink2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1CommandSink2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1CommandSink2 *This);

    /*** ID2D1CommandSink methods ***/
    HRESULT (STDMETHODCALLTYPE *BeginDraw)(
        ID2D1CommandSink2 *This);

    HRESULT (STDMETHODCALLTYPE *EndDraw)(
        ID2D1CommandSink2 *This);

    HRESULT (STDMETHODCALLTYPE *SetAntialiasMode)(
        ID2D1CommandSink2 *This,
        D2D1_ANTIALIAS_MODE antialias_mode);

    HRESULT (STDMETHODCALLTYPE *SetTags)(
        ID2D1CommandSink2 *This,
        D2D1_TAG tag1,
        D2D1_TAG tag2);

    HRESULT (STDMETHODCALLTYPE *SetTextAntialiasMode)(
        ID2D1CommandSink2 *This,
        D2D1_TEXT_ANTIALIAS_MODE antialias_mode);

    HRESULT (STDMETHODCALLTYPE *SetTextRenderingParams)(
        ID2D1CommandSink2 *This,
        IDWriteRenderingParams *text_rendering_params);

    HRESULT (STDMETHODCALLTYPE *SetTransform)(
        ID2D1CommandSink2 *This,
        const D2D1_MATRIX_3X2_F *transform);

    HRESULT (STDMETHODCALLTYPE *SetPrimitiveBlend)(
        ID2D1CommandSink2 *This,
        D2D1_PRIMITIVE_BLEND primitive_blend);

    HRESULT (STDMETHODCALLTYPE *SetUnitMode)(
        ID2D1CommandSink2 *This,
        D2D1_UNIT_MODE unit_mode);

    HRESULT (STDMETHODCALLTYPE *Clear)(
        ID2D1CommandSink2 *This,
        const D2D1_COLOR_F *color);

    HRESULT (STDMETHODCALLTYPE *DrawGlyphRun)(
        ID2D1CommandSink2 *This,
        D2D1_POINT_2F baseline_origin,
        const DWRITE_GLYPH_RUN *glyph_run,
        const DWRITE_GLYPH_RUN_DESCRIPTION *glyph_run_desc,
        ID2D1Brush *brush,
        DWRITE_MEASURING_MODE measuring_mode);

    HRESULT (STDMETHODCALLTYPE *DrawLine)(
        ID2D1CommandSink2 *This,
        D2D1_POINT_2F p0,
        D2D1_POINT_2F p1,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    HRESULT (STDMETHODCALLTYPE *DrawGeometry)(
        ID2D1CommandSink2 *This,
        ID2D1Geometry *geometry,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    HRESULT (STDMETHODCALLTYPE *DrawRectangle)(
        ID2D1CommandSink2 *This,
        const D2D1_RECT_F *rect,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    HRESULT (STDMETHODCALLTYPE *DrawBitmap)(
        ID2D1CommandSink2 *This,
        ID2D1Bitmap *bitmap,
        const D2D1_RECT_F *dst_rect,
        float opacity,
        D2D1_INTERPOLATION_MODE interpolation_mode,
        const D2D1_RECT_F *src_rect,
        const D2D1_MATRIX_4X4_F *perspective_transform);

    HRESULT (STDMETHODCALLTYPE *DrawImage)(
        ID2D1CommandSink2 *This,
        ID2D1Image *image,
        const D2D1_POINT_2F *target_offset,
        const D2D1_RECT_F *image_rect,
        D2D1_INTERPOLATION_MODE interpolation_mode,
        D2D1_COMPOSITE_MODE composite_mode);

    HRESULT (STDMETHODCALLTYPE *DrawGdiMetafile)(
        ID2D1CommandSink2 *This,
        ID2D1GdiMetafile *metafile,
        const D2D1_POINT_2F *target_offset);

    HRESULT (STDMETHODCALLTYPE *FillMesh)(
        ID2D1CommandSink2 *This,
        ID2D1Mesh *mesh,
        ID2D1Brush *brush);

    HRESULT (STDMETHODCALLTYPE *FillOpacityMask)(
        ID2D1CommandSink2 *This,
        ID2D1Bitmap *bitmap,
        ID2D1Brush *brush,
        const D2D1_RECT_F *dst_rect,
        const D2D1_RECT_F *src_rect);

    HRESULT (STDMETHODCALLTYPE *FillGeometry)(
        ID2D1CommandSink2 *This,
        ID2D1Geometry *geometry,
        ID2D1Brush *brush,
        ID2D1Brush *opacity_brush);

    HRESULT (STDMETHODCALLTYPE *FillRectangle)(
        ID2D1CommandSink2 *This,
        const D2D1_RECT_F *rect,
        ID2D1Brush *brush);

    HRESULT (STDMETHODCALLTYPE *PushAxisAlignedClip)(
        ID2D1CommandSink2 *This,
        const D2D1_RECT_F *clip_rect,
        D2D1_ANTIALIAS_MODE antialias_mode);

    HRESULT (STDMETHODCALLTYPE *PushLayer)(
        ID2D1CommandSink2 *This,
        const D2D1_LAYER_PARAMETERS1 *layer_parameters,
        ID2D1Layer *layer);

    HRESULT (STDMETHODCALLTYPE *PopAxisAlignedClip)(
        ID2D1CommandSink2 *This);

    HRESULT (STDMETHODCALLTYPE *PopLayer)(
        ID2D1CommandSink2 *This);

    /*** ID2D1CommandSink1 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrimitiveBlend1)(
        ID2D1CommandSink2 *This,
        D2D1_PRIMITIVE_BLEND primitive_blend);

    /*** ID2D1CommandSink2 methods ***/
    HRESULT (STDMETHODCALLTYPE *DrawInk)(
        ID2D1CommandSink2 *This,
        ID2D1Ink *ink,
        ID2D1Brush *brush,
        ID2D1InkStyle *ink_style);

    HRESULT (STDMETHODCALLTYPE *DrawGradientMesh)(
        ID2D1CommandSink2 *This,
        ID2D1GradientMesh *gradient_mesh);

    HRESULT (STDMETHODCALLTYPE *ID2D1CommandSink2_DrawGdiMetafile)(
        ID2D1CommandSink2 *This,
        ID2D1GdiMetafile *gdi_metafile,
        const D2D1_RECT_F *dest_rect,
        const D2D1_RECT_F *src_rect);

    END_INTERFACE
} ID2D1CommandSink2Vtbl;

interface ID2D1CommandSink2 {
    CONST_VTBL ID2D1CommandSink2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1CommandSink2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1CommandSink2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1CommandSink2_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1CommandSink methods ***/
#define ID2D1CommandSink2_BeginDraw(This) (This)->lpVtbl->BeginDraw(This)
#define ID2D1CommandSink2_EndDraw(This) (This)->lpVtbl->EndDraw(This)
#define ID2D1CommandSink2_SetAntialiasMode(This,antialias_mode) (This)->lpVtbl->SetAntialiasMode(This,antialias_mode)
#define ID2D1CommandSink2_SetTags(This,tag1,tag2) (This)->lpVtbl->SetTags(This,tag1,tag2)
#define ID2D1CommandSink2_SetTextAntialiasMode(This,antialias_mode) (This)->lpVtbl->SetTextAntialiasMode(This,antialias_mode)
#define ID2D1CommandSink2_SetTextRenderingParams(This,text_rendering_params) (This)->lpVtbl->SetTextRenderingParams(This,text_rendering_params)
#define ID2D1CommandSink2_SetTransform(This,transform) (This)->lpVtbl->SetTransform(This,transform)
#define ID2D1CommandSink2_SetPrimitiveBlend(This,primitive_blend) (This)->lpVtbl->SetPrimitiveBlend(This,primitive_blend)
#define ID2D1CommandSink2_SetUnitMode(This,unit_mode) (This)->lpVtbl->SetUnitMode(This,unit_mode)
#define ID2D1CommandSink2_Clear(This,color) (This)->lpVtbl->Clear(This,color)
#define ID2D1CommandSink2_DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode) (This)->lpVtbl->DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode)
#define ID2D1CommandSink2_DrawLine(This,p0,p1,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawLine(This,p0,p1,brush,stroke_width,stroke_style)
#define ID2D1CommandSink2_DrawGeometry(This,geometry,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawGeometry(This,geometry,brush,stroke_width,stroke_style)
#define ID2D1CommandSink2_DrawRectangle(This,rect,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawRectangle(This,rect,brush,stroke_width,stroke_style)
#define ID2D1CommandSink2_DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform) (This)->lpVtbl->DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform)
#define ID2D1CommandSink2_DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode) (This)->lpVtbl->DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode)
#define ID2D1CommandSink2_FillMesh(This,mesh,brush) (This)->lpVtbl->FillMesh(This,mesh,brush)
#define ID2D1CommandSink2_FillOpacityMask(This,bitmap,brush,dst_rect,src_rect) (This)->lpVtbl->FillOpacityMask(This,bitmap,brush,dst_rect,src_rect)
#define ID2D1CommandSink2_FillGeometry(This,geometry,brush,opacity_brush) (This)->lpVtbl->FillGeometry(This,geometry,brush,opacity_brush)
#define ID2D1CommandSink2_FillRectangle(This,rect,brush) (This)->lpVtbl->FillRectangle(This,rect,brush)
#define ID2D1CommandSink2_PushAxisAlignedClip(This,clip_rect,antialias_mode) (This)->lpVtbl->PushAxisAlignedClip(This,clip_rect,antialias_mode)
#define ID2D1CommandSink2_PushLayer(This,layer_parameters,layer) (This)->lpVtbl->PushLayer(This,layer_parameters,layer)
#define ID2D1CommandSink2_PopAxisAlignedClip(This) (This)->lpVtbl->PopAxisAlignedClip(This)
#define ID2D1CommandSink2_PopLayer(This) (This)->lpVtbl->PopLayer(This)
/*** ID2D1CommandSink1 methods ***/
#define ID2D1CommandSink2_SetPrimitiveBlend1(This,primitive_blend) (This)->lpVtbl->SetPrimitiveBlend1(This,primitive_blend)
/*** ID2D1CommandSink2 methods ***/
#define ID2D1CommandSink2_DrawInk(This,ink,brush,ink_style) (This)->lpVtbl->DrawInk(This,ink,brush,ink_style)
#define ID2D1CommandSink2_DrawGradientMesh(This,gradient_mesh) (This)->lpVtbl->DrawGradientMesh(This,gradient_mesh)
#define ID2D1CommandSink2_DrawGdiMetafile(This,gdi_metafile,dest_rect,src_rect) (This)->lpVtbl->ID2D1CommandSink2_DrawGdiMetafile(This,gdi_metafile,dest_rect,src_rect)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink2_QueryInterface(ID2D1CommandSink2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1CommandSink2_AddRef(ID2D1CommandSink2* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1CommandSink2_Release(ID2D1CommandSink2* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1CommandSink methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink2_BeginDraw(ID2D1CommandSink2* This) {
    return This->lpVtbl->BeginDraw(This);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_EndDraw(ID2D1CommandSink2* This) {
    return This->lpVtbl->EndDraw(This);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_SetAntialiasMode(ID2D1CommandSink2* This,D2D1_ANTIALIAS_MODE antialias_mode) {
    return This->lpVtbl->SetAntialiasMode(This,antialias_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_SetTags(ID2D1CommandSink2* This,D2D1_TAG tag1,D2D1_TAG tag2) {
    return This->lpVtbl->SetTags(This,tag1,tag2);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_SetTextAntialiasMode(ID2D1CommandSink2* This,D2D1_TEXT_ANTIALIAS_MODE antialias_mode) {
    return This->lpVtbl->SetTextAntialiasMode(This,antialias_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_SetTextRenderingParams(ID2D1CommandSink2* This,IDWriteRenderingParams *text_rendering_params) {
    return This->lpVtbl->SetTextRenderingParams(This,text_rendering_params);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_SetTransform(ID2D1CommandSink2* This,const D2D1_MATRIX_3X2_F *transform) {
    return This->lpVtbl->SetTransform(This,transform);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_SetPrimitiveBlend(ID2D1CommandSink2* This,D2D1_PRIMITIVE_BLEND primitive_blend) {
    return This->lpVtbl->SetPrimitiveBlend(This,primitive_blend);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_SetUnitMode(ID2D1CommandSink2* This,D2D1_UNIT_MODE unit_mode) {
    return This->lpVtbl->SetUnitMode(This,unit_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_Clear(ID2D1CommandSink2* This,const D2D1_COLOR_F *color) {
    return This->lpVtbl->Clear(This,color);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_DrawGlyphRun(ID2D1CommandSink2* This,D2D1_POINT_2F baseline_origin,const DWRITE_GLYPH_RUN *glyph_run,const DWRITE_GLYPH_RUN_DESCRIPTION *glyph_run_desc,ID2D1Brush *brush,DWRITE_MEASURING_MODE measuring_mode) {
    return This->lpVtbl->DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_DrawLine(ID2D1CommandSink2* This,D2D1_POINT_2F p0,D2D1_POINT_2F p1,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    return This->lpVtbl->DrawLine(This,p0,p1,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_DrawGeometry(ID2D1CommandSink2* This,ID2D1Geometry *geometry,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    return This->lpVtbl->DrawGeometry(This,geometry,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_DrawRectangle(ID2D1CommandSink2* This,const D2D1_RECT_F *rect,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    return This->lpVtbl->DrawRectangle(This,rect,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_DrawBitmap(ID2D1CommandSink2* This,ID2D1Bitmap *bitmap,const D2D1_RECT_F *dst_rect,float opacity,D2D1_INTERPOLATION_MODE interpolation_mode,const D2D1_RECT_F *src_rect,const D2D1_MATRIX_4X4_F *perspective_transform) {
    return This->lpVtbl->DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_DrawImage(ID2D1CommandSink2* This,ID2D1Image *image,const D2D1_POINT_2F *target_offset,const D2D1_RECT_F *image_rect,D2D1_INTERPOLATION_MODE interpolation_mode,D2D1_COMPOSITE_MODE composite_mode) {
    return This->lpVtbl->DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_FillMesh(ID2D1CommandSink2* This,ID2D1Mesh *mesh,ID2D1Brush *brush) {
    return This->lpVtbl->FillMesh(This,mesh,brush);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_FillOpacityMask(ID2D1CommandSink2* This,ID2D1Bitmap *bitmap,ID2D1Brush *brush,const D2D1_RECT_F *dst_rect,const D2D1_RECT_F *src_rect) {
    return This->lpVtbl->FillOpacityMask(This,bitmap,brush,dst_rect,src_rect);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_FillGeometry(ID2D1CommandSink2* This,ID2D1Geometry *geometry,ID2D1Brush *brush,ID2D1Brush *opacity_brush) {
    return This->lpVtbl->FillGeometry(This,geometry,brush,opacity_brush);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_FillRectangle(ID2D1CommandSink2* This,const D2D1_RECT_F *rect,ID2D1Brush *brush) {
    return This->lpVtbl->FillRectangle(This,rect,brush);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_PushAxisAlignedClip(ID2D1CommandSink2* This,const D2D1_RECT_F *clip_rect,D2D1_ANTIALIAS_MODE antialias_mode) {
    return This->lpVtbl->PushAxisAlignedClip(This,clip_rect,antialias_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_PushLayer(ID2D1CommandSink2* This,const D2D1_LAYER_PARAMETERS1 *layer_parameters,ID2D1Layer *layer) {
    return This->lpVtbl->PushLayer(This,layer_parameters,layer);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_PopAxisAlignedClip(ID2D1CommandSink2* This) {
    return This->lpVtbl->PopAxisAlignedClip(This);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_PopLayer(ID2D1CommandSink2* This) {
    return This->lpVtbl->PopLayer(This);
}
/*** ID2D1CommandSink1 methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink2_SetPrimitiveBlend1(ID2D1CommandSink2* This,D2D1_PRIMITIVE_BLEND primitive_blend) {
    return This->lpVtbl->SetPrimitiveBlend1(This,primitive_blend);
}
/*** ID2D1CommandSink2 methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink2_DrawInk(ID2D1CommandSink2* This,ID2D1Ink *ink,ID2D1Brush *brush,ID2D1InkStyle *ink_style) {
    return This->lpVtbl->DrawInk(This,ink,brush,ink_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_DrawGradientMesh(ID2D1CommandSink2* This,ID2D1GradientMesh *gradient_mesh) {
    return This->lpVtbl->DrawGradientMesh(This,gradient_mesh);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink2_DrawGdiMetafile(ID2D1CommandSink2* This,ID2D1GdiMetafile *gdi_metafile,const D2D1_RECT_F *dest_rect,const D2D1_RECT_F *src_rect) {
    return This->lpVtbl->ID2D1CommandSink2_DrawGdiMetafile(This,gdi_metafile,dest_rect,src_rect);
}
#endif
#endif

#endif


#endif  /* __ID2D1CommandSink2_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1CommandSink3 interface
 */
#ifndef __ID2D1CommandSink3_INTERFACE_DEFINED__
#define __ID2D1CommandSink3_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1CommandSink3, 0x18079135, 0x4cf3, 0x4868, 0xbc,0x8e, 0x06,0x06,0x7e,0x6d,0x24,0x2d);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("18079135-4cf3-4868-bc8e-06067e6d242d")
ID2D1CommandSink3 : public ID2D1CommandSink2
{
    virtual HRESULT STDMETHODCALLTYPE DrawSpriteBatch(
        ID2D1SpriteBatch *sprite_batch,
        UINT32 start_index,
        UINT32 sprite_count,
        ID2D1Bitmap *bitmap,
        D2D1_BITMAP_INTERPOLATION_MODE interpolation_mode,
        D2D1_SPRITE_OPTIONS sprite_options) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1CommandSink3, 0x18079135, 0x4cf3, 0x4868, 0xbc,0x8e, 0x06,0x06,0x7e,0x6d,0x24,0x2d)
#endif
#else
typedef struct ID2D1CommandSink3Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1CommandSink3 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1CommandSink3 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1CommandSink3 *This);

    /*** ID2D1CommandSink methods ***/
    HRESULT (STDMETHODCALLTYPE *BeginDraw)(
        ID2D1CommandSink3 *This);

    HRESULT (STDMETHODCALLTYPE *EndDraw)(
        ID2D1CommandSink3 *This);

    HRESULT (STDMETHODCALLTYPE *SetAntialiasMode)(
        ID2D1CommandSink3 *This,
        D2D1_ANTIALIAS_MODE antialias_mode);

    HRESULT (STDMETHODCALLTYPE *SetTags)(
        ID2D1CommandSink3 *This,
        D2D1_TAG tag1,
        D2D1_TAG tag2);

    HRESULT (STDMETHODCALLTYPE *SetTextAntialiasMode)(
        ID2D1CommandSink3 *This,
        D2D1_TEXT_ANTIALIAS_MODE antialias_mode);

    HRESULT (STDMETHODCALLTYPE *SetTextRenderingParams)(
        ID2D1CommandSink3 *This,
        IDWriteRenderingParams *text_rendering_params);

    HRESULT (STDMETHODCALLTYPE *SetTransform)(
        ID2D1CommandSink3 *This,
        const D2D1_MATRIX_3X2_F *transform);

    HRESULT (STDMETHODCALLTYPE *SetPrimitiveBlend)(
        ID2D1CommandSink3 *This,
        D2D1_PRIMITIVE_BLEND primitive_blend);

    HRESULT (STDMETHODCALLTYPE *SetUnitMode)(
        ID2D1CommandSink3 *This,
        D2D1_UNIT_MODE unit_mode);

    HRESULT (STDMETHODCALLTYPE *Clear)(
        ID2D1CommandSink3 *This,
        const D2D1_COLOR_F *color);

    HRESULT (STDMETHODCALLTYPE *DrawGlyphRun)(
        ID2D1CommandSink3 *This,
        D2D1_POINT_2F baseline_origin,
        const DWRITE_GLYPH_RUN *glyph_run,
        const DWRITE_GLYPH_RUN_DESCRIPTION *glyph_run_desc,
        ID2D1Brush *brush,
        DWRITE_MEASURING_MODE measuring_mode);

    HRESULT (STDMETHODCALLTYPE *DrawLine)(
        ID2D1CommandSink3 *This,
        D2D1_POINT_2F p0,
        D2D1_POINT_2F p1,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    HRESULT (STDMETHODCALLTYPE *DrawGeometry)(
        ID2D1CommandSink3 *This,
        ID2D1Geometry *geometry,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    HRESULT (STDMETHODCALLTYPE *DrawRectangle)(
        ID2D1CommandSink3 *This,
        const D2D1_RECT_F *rect,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    HRESULT (STDMETHODCALLTYPE *DrawBitmap)(
        ID2D1CommandSink3 *This,
        ID2D1Bitmap *bitmap,
        const D2D1_RECT_F *dst_rect,
        float opacity,
        D2D1_INTERPOLATION_MODE interpolation_mode,
        const D2D1_RECT_F *src_rect,
        const D2D1_MATRIX_4X4_F *perspective_transform);

    HRESULT (STDMETHODCALLTYPE *DrawImage)(
        ID2D1CommandSink3 *This,
        ID2D1Image *image,
        const D2D1_POINT_2F *target_offset,
        const D2D1_RECT_F *image_rect,
        D2D1_INTERPOLATION_MODE interpolation_mode,
        D2D1_COMPOSITE_MODE composite_mode);

    HRESULT (STDMETHODCALLTYPE *DrawGdiMetafile)(
        ID2D1CommandSink3 *This,
        ID2D1GdiMetafile *metafile,
        const D2D1_POINT_2F *target_offset);

    HRESULT (STDMETHODCALLTYPE *FillMesh)(
        ID2D1CommandSink3 *This,
        ID2D1Mesh *mesh,
        ID2D1Brush *brush);

    HRESULT (STDMETHODCALLTYPE *FillOpacityMask)(
        ID2D1CommandSink3 *This,
        ID2D1Bitmap *bitmap,
        ID2D1Brush *brush,
        const D2D1_RECT_F *dst_rect,
        const D2D1_RECT_F *src_rect);

    HRESULT (STDMETHODCALLTYPE *FillGeometry)(
        ID2D1CommandSink3 *This,
        ID2D1Geometry *geometry,
        ID2D1Brush *brush,
        ID2D1Brush *opacity_brush);

    HRESULT (STDMETHODCALLTYPE *FillRectangle)(
        ID2D1CommandSink3 *This,
        const D2D1_RECT_F *rect,
        ID2D1Brush *brush);

    HRESULT (STDMETHODCALLTYPE *PushAxisAlignedClip)(
        ID2D1CommandSink3 *This,
        const D2D1_RECT_F *clip_rect,
        D2D1_ANTIALIAS_MODE antialias_mode);

    HRESULT (STDMETHODCALLTYPE *PushLayer)(
        ID2D1CommandSink3 *This,
        const D2D1_LAYER_PARAMETERS1 *layer_parameters,
        ID2D1Layer *layer);

    HRESULT (STDMETHODCALLTYPE *PopAxisAlignedClip)(
        ID2D1CommandSink3 *This);

    HRESULT (STDMETHODCALLTYPE *PopLayer)(
        ID2D1CommandSink3 *This);

    /*** ID2D1CommandSink1 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrimitiveBlend1)(
        ID2D1CommandSink3 *This,
        D2D1_PRIMITIVE_BLEND primitive_blend);

    /*** ID2D1CommandSink2 methods ***/
    HRESULT (STDMETHODCALLTYPE *DrawInk)(
        ID2D1CommandSink3 *This,
        ID2D1Ink *ink,
        ID2D1Brush *brush,
        ID2D1InkStyle *ink_style);

    HRESULT (STDMETHODCALLTYPE *DrawGradientMesh)(
        ID2D1CommandSink3 *This,
        ID2D1GradientMesh *gradient_mesh);

    HRESULT (STDMETHODCALLTYPE *ID2D1CommandSink2_DrawGdiMetafile)(
        ID2D1CommandSink3 *This,
        ID2D1GdiMetafile *gdi_metafile,
        const D2D1_RECT_F *dest_rect,
        const D2D1_RECT_F *src_rect);

    /*** ID2D1CommandSink3 methods ***/
    HRESULT (STDMETHODCALLTYPE *DrawSpriteBatch)(
        ID2D1CommandSink3 *This,
        ID2D1SpriteBatch *sprite_batch,
        UINT32 start_index,
        UINT32 sprite_count,
        ID2D1Bitmap *bitmap,
        D2D1_BITMAP_INTERPOLATION_MODE interpolation_mode,
        D2D1_SPRITE_OPTIONS sprite_options);

    END_INTERFACE
} ID2D1CommandSink3Vtbl;

interface ID2D1CommandSink3 {
    CONST_VTBL ID2D1CommandSink3Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1CommandSink3_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1CommandSink3_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1CommandSink3_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1CommandSink methods ***/
#define ID2D1CommandSink3_BeginDraw(This) (This)->lpVtbl->BeginDraw(This)
#define ID2D1CommandSink3_EndDraw(This) (This)->lpVtbl->EndDraw(This)
#define ID2D1CommandSink3_SetAntialiasMode(This,antialias_mode) (This)->lpVtbl->SetAntialiasMode(This,antialias_mode)
#define ID2D1CommandSink3_SetTags(This,tag1,tag2) (This)->lpVtbl->SetTags(This,tag1,tag2)
#define ID2D1CommandSink3_SetTextAntialiasMode(This,antialias_mode) (This)->lpVtbl->SetTextAntialiasMode(This,antialias_mode)
#define ID2D1CommandSink3_SetTextRenderingParams(This,text_rendering_params) (This)->lpVtbl->SetTextRenderingParams(This,text_rendering_params)
#define ID2D1CommandSink3_SetTransform(This,transform) (This)->lpVtbl->SetTransform(This,transform)
#define ID2D1CommandSink3_SetPrimitiveBlend(This,primitive_blend) (This)->lpVtbl->SetPrimitiveBlend(This,primitive_blend)
#define ID2D1CommandSink3_SetUnitMode(This,unit_mode) (This)->lpVtbl->SetUnitMode(This,unit_mode)
#define ID2D1CommandSink3_Clear(This,color) (This)->lpVtbl->Clear(This,color)
#define ID2D1CommandSink3_DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode) (This)->lpVtbl->DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode)
#define ID2D1CommandSink3_DrawLine(This,p0,p1,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawLine(This,p0,p1,brush,stroke_width,stroke_style)
#define ID2D1CommandSink3_DrawGeometry(This,geometry,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawGeometry(This,geometry,brush,stroke_width,stroke_style)
#define ID2D1CommandSink3_DrawRectangle(This,rect,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawRectangle(This,rect,brush,stroke_width,stroke_style)
#define ID2D1CommandSink3_DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform) (This)->lpVtbl->DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform)
#define ID2D1CommandSink3_DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode) (This)->lpVtbl->DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode)
#define ID2D1CommandSink3_FillMesh(This,mesh,brush) (This)->lpVtbl->FillMesh(This,mesh,brush)
#define ID2D1CommandSink3_FillOpacityMask(This,bitmap,brush,dst_rect,src_rect) (This)->lpVtbl->FillOpacityMask(This,bitmap,brush,dst_rect,src_rect)
#define ID2D1CommandSink3_FillGeometry(This,geometry,brush,opacity_brush) (This)->lpVtbl->FillGeometry(This,geometry,brush,opacity_brush)
#define ID2D1CommandSink3_FillRectangle(This,rect,brush) (This)->lpVtbl->FillRectangle(This,rect,brush)
#define ID2D1CommandSink3_PushAxisAlignedClip(This,clip_rect,antialias_mode) (This)->lpVtbl->PushAxisAlignedClip(This,clip_rect,antialias_mode)
#define ID2D1CommandSink3_PushLayer(This,layer_parameters,layer) (This)->lpVtbl->PushLayer(This,layer_parameters,layer)
#define ID2D1CommandSink3_PopAxisAlignedClip(This) (This)->lpVtbl->PopAxisAlignedClip(This)
#define ID2D1CommandSink3_PopLayer(This) (This)->lpVtbl->PopLayer(This)
/*** ID2D1CommandSink1 methods ***/
#define ID2D1CommandSink3_SetPrimitiveBlend1(This,primitive_blend) (This)->lpVtbl->SetPrimitiveBlend1(This,primitive_blend)
/*** ID2D1CommandSink2 methods ***/
#define ID2D1CommandSink3_DrawInk(This,ink,brush,ink_style) (This)->lpVtbl->DrawInk(This,ink,brush,ink_style)
#define ID2D1CommandSink3_DrawGradientMesh(This,gradient_mesh) (This)->lpVtbl->DrawGradientMesh(This,gradient_mesh)
#define ID2D1CommandSink3_DrawGdiMetafile(This,gdi_metafile,dest_rect,src_rect) (This)->lpVtbl->ID2D1CommandSink2_DrawGdiMetafile(This,gdi_metafile,dest_rect,src_rect)
/*** ID2D1CommandSink3 methods ***/
#define ID2D1CommandSink3_DrawSpriteBatch(This,sprite_batch,start_index,sprite_count,bitmap,interpolation_mode,sprite_options) (This)->lpVtbl->DrawSpriteBatch(This,sprite_batch,start_index,sprite_count,bitmap,interpolation_mode,sprite_options)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink3_QueryInterface(ID2D1CommandSink3* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1CommandSink3_AddRef(ID2D1CommandSink3* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1CommandSink3_Release(ID2D1CommandSink3* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1CommandSink methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink3_BeginDraw(ID2D1CommandSink3* This) {
    return This->lpVtbl->BeginDraw(This);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_EndDraw(ID2D1CommandSink3* This) {
    return This->lpVtbl->EndDraw(This);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_SetAntialiasMode(ID2D1CommandSink3* This,D2D1_ANTIALIAS_MODE antialias_mode) {
    return This->lpVtbl->SetAntialiasMode(This,antialias_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_SetTags(ID2D1CommandSink3* This,D2D1_TAG tag1,D2D1_TAG tag2) {
    return This->lpVtbl->SetTags(This,tag1,tag2);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_SetTextAntialiasMode(ID2D1CommandSink3* This,D2D1_TEXT_ANTIALIAS_MODE antialias_mode) {
    return This->lpVtbl->SetTextAntialiasMode(This,antialias_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_SetTextRenderingParams(ID2D1CommandSink3* This,IDWriteRenderingParams *text_rendering_params) {
    return This->lpVtbl->SetTextRenderingParams(This,text_rendering_params);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_SetTransform(ID2D1CommandSink3* This,const D2D1_MATRIX_3X2_F *transform) {
    return This->lpVtbl->SetTransform(This,transform);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_SetPrimitiveBlend(ID2D1CommandSink3* This,D2D1_PRIMITIVE_BLEND primitive_blend) {
    return This->lpVtbl->SetPrimitiveBlend(This,primitive_blend);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_SetUnitMode(ID2D1CommandSink3* This,D2D1_UNIT_MODE unit_mode) {
    return This->lpVtbl->SetUnitMode(This,unit_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_Clear(ID2D1CommandSink3* This,const D2D1_COLOR_F *color) {
    return This->lpVtbl->Clear(This,color);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_DrawGlyphRun(ID2D1CommandSink3* This,D2D1_POINT_2F baseline_origin,const DWRITE_GLYPH_RUN *glyph_run,const DWRITE_GLYPH_RUN_DESCRIPTION *glyph_run_desc,ID2D1Brush *brush,DWRITE_MEASURING_MODE measuring_mode) {
    return This->lpVtbl->DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_DrawLine(ID2D1CommandSink3* This,D2D1_POINT_2F p0,D2D1_POINT_2F p1,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    return This->lpVtbl->DrawLine(This,p0,p1,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_DrawGeometry(ID2D1CommandSink3* This,ID2D1Geometry *geometry,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    return This->lpVtbl->DrawGeometry(This,geometry,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_DrawRectangle(ID2D1CommandSink3* This,const D2D1_RECT_F *rect,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    return This->lpVtbl->DrawRectangle(This,rect,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_DrawBitmap(ID2D1CommandSink3* This,ID2D1Bitmap *bitmap,const D2D1_RECT_F *dst_rect,float opacity,D2D1_INTERPOLATION_MODE interpolation_mode,const D2D1_RECT_F *src_rect,const D2D1_MATRIX_4X4_F *perspective_transform) {
    return This->lpVtbl->DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_DrawImage(ID2D1CommandSink3* This,ID2D1Image *image,const D2D1_POINT_2F *target_offset,const D2D1_RECT_F *image_rect,D2D1_INTERPOLATION_MODE interpolation_mode,D2D1_COMPOSITE_MODE composite_mode) {
    return This->lpVtbl->DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_FillMesh(ID2D1CommandSink3* This,ID2D1Mesh *mesh,ID2D1Brush *brush) {
    return This->lpVtbl->FillMesh(This,mesh,brush);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_FillOpacityMask(ID2D1CommandSink3* This,ID2D1Bitmap *bitmap,ID2D1Brush *brush,const D2D1_RECT_F *dst_rect,const D2D1_RECT_F *src_rect) {
    return This->lpVtbl->FillOpacityMask(This,bitmap,brush,dst_rect,src_rect);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_FillGeometry(ID2D1CommandSink3* This,ID2D1Geometry *geometry,ID2D1Brush *brush,ID2D1Brush *opacity_brush) {
    return This->lpVtbl->FillGeometry(This,geometry,brush,opacity_brush);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_FillRectangle(ID2D1CommandSink3* This,const D2D1_RECT_F *rect,ID2D1Brush *brush) {
    return This->lpVtbl->FillRectangle(This,rect,brush);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_PushAxisAlignedClip(ID2D1CommandSink3* This,const D2D1_RECT_F *clip_rect,D2D1_ANTIALIAS_MODE antialias_mode) {
    return This->lpVtbl->PushAxisAlignedClip(This,clip_rect,antialias_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_PushLayer(ID2D1CommandSink3* This,const D2D1_LAYER_PARAMETERS1 *layer_parameters,ID2D1Layer *layer) {
    return This->lpVtbl->PushLayer(This,layer_parameters,layer);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_PopAxisAlignedClip(ID2D1CommandSink3* This) {
    return This->lpVtbl->PopAxisAlignedClip(This);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_PopLayer(ID2D1CommandSink3* This) {
    return This->lpVtbl->PopLayer(This);
}
/*** ID2D1CommandSink1 methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink3_SetPrimitiveBlend1(ID2D1CommandSink3* This,D2D1_PRIMITIVE_BLEND primitive_blend) {
    return This->lpVtbl->SetPrimitiveBlend1(This,primitive_blend);
}
/*** ID2D1CommandSink2 methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink3_DrawInk(ID2D1CommandSink3* This,ID2D1Ink *ink,ID2D1Brush *brush,ID2D1InkStyle *ink_style) {
    return This->lpVtbl->DrawInk(This,ink,brush,ink_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_DrawGradientMesh(ID2D1CommandSink3* This,ID2D1GradientMesh *gradient_mesh) {
    return This->lpVtbl->DrawGradientMesh(This,gradient_mesh);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink3_DrawGdiMetafile(ID2D1CommandSink3* This,ID2D1GdiMetafile *gdi_metafile,const D2D1_RECT_F *dest_rect,const D2D1_RECT_F *src_rect) {
    return This->lpVtbl->ID2D1CommandSink2_DrawGdiMetafile(This,gdi_metafile,dest_rect,src_rect);
}
/*** ID2D1CommandSink3 methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink3_DrawSpriteBatch(ID2D1CommandSink3* This,ID2D1SpriteBatch *sprite_batch,UINT32 start_index,UINT32 sprite_count,ID2D1Bitmap *bitmap,D2D1_BITMAP_INTERPOLATION_MODE interpolation_mode,D2D1_SPRITE_OPTIONS sprite_options) {
    return This->lpVtbl->DrawSpriteBatch(This,sprite_batch,start_index,sprite_count,bitmap,interpolation_mode,sprite_options);
}
#endif
#endif

#endif


#endif  /* __ID2D1CommandSink3_INTERFACE_DEFINED__ */

/*****************************************************************************
 * ID2D1CommandSink4 interface
 */
#ifndef __ID2D1CommandSink4_INTERFACE_DEFINED__
#define __ID2D1CommandSink4_INTERFACE_DEFINED__

DEFINE_GUID(IID_ID2D1CommandSink4, 0xc78a6519, 0x40d6, 0x4218, 0xb2,0xde, 0xbe,0xee,0xb7,0x44,0xbb,0x3e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c78a6519-40d6-4218-b2de-beeeb744bb3e")
ID2D1CommandSink4 : public ID2D1CommandSink3
{
    virtual HRESULT STDMETHODCALLTYPE SetPrimitiveBlend2(
        D2D1_PRIMITIVE_BLEND primitive_blend) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ID2D1CommandSink4, 0xc78a6519, 0x40d6, 0x4218, 0xb2,0xde, 0xbe,0xee,0xb7,0x44,0xbb,0x3e)
#endif
#else
typedef struct ID2D1CommandSink4Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ID2D1CommandSink4 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ID2D1CommandSink4 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ID2D1CommandSink4 *This);

    /*** ID2D1CommandSink methods ***/
    HRESULT (STDMETHODCALLTYPE *BeginDraw)(
        ID2D1CommandSink4 *This);

    HRESULT (STDMETHODCALLTYPE *EndDraw)(
        ID2D1CommandSink4 *This);

    HRESULT (STDMETHODCALLTYPE *SetAntialiasMode)(
        ID2D1CommandSink4 *This,
        D2D1_ANTIALIAS_MODE antialias_mode);

    HRESULT (STDMETHODCALLTYPE *SetTags)(
        ID2D1CommandSink4 *This,
        D2D1_TAG tag1,
        D2D1_TAG tag2);

    HRESULT (STDMETHODCALLTYPE *SetTextAntialiasMode)(
        ID2D1CommandSink4 *This,
        D2D1_TEXT_ANTIALIAS_MODE antialias_mode);

    HRESULT (STDMETHODCALLTYPE *SetTextRenderingParams)(
        ID2D1CommandSink4 *This,
        IDWriteRenderingParams *text_rendering_params);

    HRESULT (STDMETHODCALLTYPE *SetTransform)(
        ID2D1CommandSink4 *This,
        const D2D1_MATRIX_3X2_F *transform);

    HRESULT (STDMETHODCALLTYPE *SetPrimitiveBlend)(
        ID2D1CommandSink4 *This,
        D2D1_PRIMITIVE_BLEND primitive_blend);

    HRESULT (STDMETHODCALLTYPE *SetUnitMode)(
        ID2D1CommandSink4 *This,
        D2D1_UNIT_MODE unit_mode);

    HRESULT (STDMETHODCALLTYPE *Clear)(
        ID2D1CommandSink4 *This,
        const D2D1_COLOR_F *color);

    HRESULT (STDMETHODCALLTYPE *DrawGlyphRun)(
        ID2D1CommandSink4 *This,
        D2D1_POINT_2F baseline_origin,
        const DWRITE_GLYPH_RUN *glyph_run,
        const DWRITE_GLYPH_RUN_DESCRIPTION *glyph_run_desc,
        ID2D1Brush *brush,
        DWRITE_MEASURING_MODE measuring_mode);

    HRESULT (STDMETHODCALLTYPE *DrawLine)(
        ID2D1CommandSink4 *This,
        D2D1_POINT_2F p0,
        D2D1_POINT_2F p1,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    HRESULT (STDMETHODCALLTYPE *DrawGeometry)(
        ID2D1CommandSink4 *This,
        ID2D1Geometry *geometry,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    HRESULT (STDMETHODCALLTYPE *DrawRectangle)(
        ID2D1CommandSink4 *This,
        const D2D1_RECT_F *rect,
        ID2D1Brush *brush,
        float stroke_width,
        ID2D1StrokeStyle *stroke_style);

    HRESULT (STDMETHODCALLTYPE *DrawBitmap)(
        ID2D1CommandSink4 *This,
        ID2D1Bitmap *bitmap,
        const D2D1_RECT_F *dst_rect,
        float opacity,
        D2D1_INTERPOLATION_MODE interpolation_mode,
        const D2D1_RECT_F *src_rect,
        const D2D1_MATRIX_4X4_F *perspective_transform);

    HRESULT (STDMETHODCALLTYPE *DrawImage)(
        ID2D1CommandSink4 *This,
        ID2D1Image *image,
        const D2D1_POINT_2F *target_offset,
        const D2D1_RECT_F *image_rect,
        D2D1_INTERPOLATION_MODE interpolation_mode,
        D2D1_COMPOSITE_MODE composite_mode);

    HRESULT (STDMETHODCALLTYPE *DrawGdiMetafile)(
        ID2D1CommandSink4 *This,
        ID2D1GdiMetafile *metafile,
        const D2D1_POINT_2F *target_offset);

    HRESULT (STDMETHODCALLTYPE *FillMesh)(
        ID2D1CommandSink4 *This,
        ID2D1Mesh *mesh,
        ID2D1Brush *brush);

    HRESULT (STDMETHODCALLTYPE *FillOpacityMask)(
        ID2D1CommandSink4 *This,
        ID2D1Bitmap *bitmap,
        ID2D1Brush *brush,
        const D2D1_RECT_F *dst_rect,
        const D2D1_RECT_F *src_rect);

    HRESULT (STDMETHODCALLTYPE *FillGeometry)(
        ID2D1CommandSink4 *This,
        ID2D1Geometry *geometry,
        ID2D1Brush *brush,
        ID2D1Brush *opacity_brush);

    HRESULT (STDMETHODCALLTYPE *FillRectangle)(
        ID2D1CommandSink4 *This,
        const D2D1_RECT_F *rect,
        ID2D1Brush *brush);

    HRESULT (STDMETHODCALLTYPE *PushAxisAlignedClip)(
        ID2D1CommandSink4 *This,
        const D2D1_RECT_F *clip_rect,
        D2D1_ANTIALIAS_MODE antialias_mode);

    HRESULT (STDMETHODCALLTYPE *PushLayer)(
        ID2D1CommandSink4 *This,
        const D2D1_LAYER_PARAMETERS1 *layer_parameters,
        ID2D1Layer *layer);

    HRESULT (STDMETHODCALLTYPE *PopAxisAlignedClip)(
        ID2D1CommandSink4 *This);

    HRESULT (STDMETHODCALLTYPE *PopLayer)(
        ID2D1CommandSink4 *This);

    /*** ID2D1CommandSink1 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrimitiveBlend1)(
        ID2D1CommandSink4 *This,
        D2D1_PRIMITIVE_BLEND primitive_blend);

    /*** ID2D1CommandSink2 methods ***/
    HRESULT (STDMETHODCALLTYPE *DrawInk)(
        ID2D1CommandSink4 *This,
        ID2D1Ink *ink,
        ID2D1Brush *brush,
        ID2D1InkStyle *ink_style);

    HRESULT (STDMETHODCALLTYPE *DrawGradientMesh)(
        ID2D1CommandSink4 *This,
        ID2D1GradientMesh *gradient_mesh);

    HRESULT (STDMETHODCALLTYPE *ID2D1CommandSink2_DrawGdiMetafile)(
        ID2D1CommandSink4 *This,
        ID2D1GdiMetafile *gdi_metafile,
        const D2D1_RECT_F *dest_rect,
        const D2D1_RECT_F *src_rect);

    /*** ID2D1CommandSink3 methods ***/
    HRESULT (STDMETHODCALLTYPE *DrawSpriteBatch)(
        ID2D1CommandSink4 *This,
        ID2D1SpriteBatch *sprite_batch,
        UINT32 start_index,
        UINT32 sprite_count,
        ID2D1Bitmap *bitmap,
        D2D1_BITMAP_INTERPOLATION_MODE interpolation_mode,
        D2D1_SPRITE_OPTIONS sprite_options);

    /*** ID2D1CommandSink4 methods ***/
    HRESULT (STDMETHODCALLTYPE *SetPrimitiveBlend2)(
        ID2D1CommandSink4 *This,
        D2D1_PRIMITIVE_BLEND primitive_blend);

    END_INTERFACE
} ID2D1CommandSink4Vtbl;

interface ID2D1CommandSink4 {
    CONST_VTBL ID2D1CommandSink4Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ID2D1CommandSink4_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ID2D1CommandSink4_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ID2D1CommandSink4_Release(This) (This)->lpVtbl->Release(This)
/*** ID2D1CommandSink methods ***/
#define ID2D1CommandSink4_BeginDraw(This) (This)->lpVtbl->BeginDraw(This)
#define ID2D1CommandSink4_EndDraw(This) (This)->lpVtbl->EndDraw(This)
#define ID2D1CommandSink4_SetAntialiasMode(This,antialias_mode) (This)->lpVtbl->SetAntialiasMode(This,antialias_mode)
#define ID2D1CommandSink4_SetTags(This,tag1,tag2) (This)->lpVtbl->SetTags(This,tag1,tag2)
#define ID2D1CommandSink4_SetTextAntialiasMode(This,antialias_mode) (This)->lpVtbl->SetTextAntialiasMode(This,antialias_mode)
#define ID2D1CommandSink4_SetTextRenderingParams(This,text_rendering_params) (This)->lpVtbl->SetTextRenderingParams(This,text_rendering_params)
#define ID2D1CommandSink4_SetTransform(This,transform) (This)->lpVtbl->SetTransform(This,transform)
#define ID2D1CommandSink4_SetPrimitiveBlend(This,primitive_blend) (This)->lpVtbl->SetPrimitiveBlend(This,primitive_blend)
#define ID2D1CommandSink4_SetUnitMode(This,unit_mode) (This)->lpVtbl->SetUnitMode(This,unit_mode)
#define ID2D1CommandSink4_Clear(This,color) (This)->lpVtbl->Clear(This,color)
#define ID2D1CommandSink4_DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode) (This)->lpVtbl->DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode)
#define ID2D1CommandSink4_DrawLine(This,p0,p1,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawLine(This,p0,p1,brush,stroke_width,stroke_style)
#define ID2D1CommandSink4_DrawGeometry(This,geometry,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawGeometry(This,geometry,brush,stroke_width,stroke_style)
#define ID2D1CommandSink4_DrawRectangle(This,rect,brush,stroke_width,stroke_style) (This)->lpVtbl->DrawRectangle(This,rect,brush,stroke_width,stroke_style)
#define ID2D1CommandSink4_DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform) (This)->lpVtbl->DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform)
#define ID2D1CommandSink4_DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode) (This)->lpVtbl->DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode)
#define ID2D1CommandSink4_FillMesh(This,mesh,brush) (This)->lpVtbl->FillMesh(This,mesh,brush)
#define ID2D1CommandSink4_FillOpacityMask(This,bitmap,brush,dst_rect,src_rect) (This)->lpVtbl->FillOpacityMask(This,bitmap,brush,dst_rect,src_rect)
#define ID2D1CommandSink4_FillGeometry(This,geometry,brush,opacity_brush) (This)->lpVtbl->FillGeometry(This,geometry,brush,opacity_brush)
#define ID2D1CommandSink4_FillRectangle(This,rect,brush) (This)->lpVtbl->FillRectangle(This,rect,brush)
#define ID2D1CommandSink4_PushAxisAlignedClip(This,clip_rect,antialias_mode) (This)->lpVtbl->PushAxisAlignedClip(This,clip_rect,antialias_mode)
#define ID2D1CommandSink4_PushLayer(This,layer_parameters,layer) (This)->lpVtbl->PushLayer(This,layer_parameters,layer)
#define ID2D1CommandSink4_PopAxisAlignedClip(This) (This)->lpVtbl->PopAxisAlignedClip(This)
#define ID2D1CommandSink4_PopLayer(This) (This)->lpVtbl->PopLayer(This)
/*** ID2D1CommandSink1 methods ***/
#define ID2D1CommandSink4_SetPrimitiveBlend1(This,primitive_blend) (This)->lpVtbl->SetPrimitiveBlend1(This,primitive_blend)
/*** ID2D1CommandSink2 methods ***/
#define ID2D1CommandSink4_DrawInk(This,ink,brush,ink_style) (This)->lpVtbl->DrawInk(This,ink,brush,ink_style)
#define ID2D1CommandSink4_DrawGradientMesh(This,gradient_mesh) (This)->lpVtbl->DrawGradientMesh(This,gradient_mesh)
#define ID2D1CommandSink4_DrawGdiMetafile(This,gdi_metafile,dest_rect,src_rect) (This)->lpVtbl->ID2D1CommandSink2_DrawGdiMetafile(This,gdi_metafile,dest_rect,src_rect)
/*** ID2D1CommandSink3 methods ***/
#define ID2D1CommandSink4_DrawSpriteBatch(This,sprite_batch,start_index,sprite_count,bitmap,interpolation_mode,sprite_options) (This)->lpVtbl->DrawSpriteBatch(This,sprite_batch,start_index,sprite_count,bitmap,interpolation_mode,sprite_options)
/*** ID2D1CommandSink4 methods ***/
#define ID2D1CommandSink4_SetPrimitiveBlend2(This,primitive_blend) (This)->lpVtbl->SetPrimitiveBlend2(This,primitive_blend)
#else
/*** IUnknown methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink4_QueryInterface(ID2D1CommandSink4* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static __WIDL_INLINE ULONG ID2D1CommandSink4_AddRef(ID2D1CommandSink4* This) {
    return This->lpVtbl->AddRef(This);
}
static __WIDL_INLINE ULONG ID2D1CommandSink4_Release(ID2D1CommandSink4* This) {
    return This->lpVtbl->Release(This);
}
/*** ID2D1CommandSink methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink4_BeginDraw(ID2D1CommandSink4* This) {
    return This->lpVtbl->BeginDraw(This);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_EndDraw(ID2D1CommandSink4* This) {
    return This->lpVtbl->EndDraw(This);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_SetAntialiasMode(ID2D1CommandSink4* This,D2D1_ANTIALIAS_MODE antialias_mode) {
    return This->lpVtbl->SetAntialiasMode(This,antialias_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_SetTags(ID2D1CommandSink4* This,D2D1_TAG tag1,D2D1_TAG tag2) {
    return This->lpVtbl->SetTags(This,tag1,tag2);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_SetTextAntialiasMode(ID2D1CommandSink4* This,D2D1_TEXT_ANTIALIAS_MODE antialias_mode) {
    return This->lpVtbl->SetTextAntialiasMode(This,antialias_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_SetTextRenderingParams(ID2D1CommandSink4* This,IDWriteRenderingParams *text_rendering_params) {
    return This->lpVtbl->SetTextRenderingParams(This,text_rendering_params);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_SetTransform(ID2D1CommandSink4* This,const D2D1_MATRIX_3X2_F *transform) {
    return This->lpVtbl->SetTransform(This,transform);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_SetPrimitiveBlend(ID2D1CommandSink4* This,D2D1_PRIMITIVE_BLEND primitive_blend) {
    return This->lpVtbl->SetPrimitiveBlend(This,primitive_blend);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_SetUnitMode(ID2D1CommandSink4* This,D2D1_UNIT_MODE unit_mode) {
    return This->lpVtbl->SetUnitMode(This,unit_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_Clear(ID2D1CommandSink4* This,const D2D1_COLOR_F *color) {
    return This->lpVtbl->Clear(This,color);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_DrawGlyphRun(ID2D1CommandSink4* This,D2D1_POINT_2F baseline_origin,const DWRITE_GLYPH_RUN *glyph_run,const DWRITE_GLYPH_RUN_DESCRIPTION *glyph_run_desc,ID2D1Brush *brush,DWRITE_MEASURING_MODE measuring_mode) {
    return This->lpVtbl->DrawGlyphRun(This,baseline_origin,glyph_run,glyph_run_desc,brush,measuring_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_DrawLine(ID2D1CommandSink4* This,D2D1_POINT_2F p0,D2D1_POINT_2F p1,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    return This->lpVtbl->DrawLine(This,p0,p1,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_DrawGeometry(ID2D1CommandSink4* This,ID2D1Geometry *geometry,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    return This->lpVtbl->DrawGeometry(This,geometry,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_DrawRectangle(ID2D1CommandSink4* This,const D2D1_RECT_F *rect,ID2D1Brush *brush,float stroke_width,ID2D1StrokeStyle *stroke_style) {
    return This->lpVtbl->DrawRectangle(This,rect,brush,stroke_width,stroke_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_DrawBitmap(ID2D1CommandSink4* This,ID2D1Bitmap *bitmap,const D2D1_RECT_F *dst_rect,float opacity,D2D1_INTERPOLATION_MODE interpolation_mode,const D2D1_RECT_F *src_rect,const D2D1_MATRIX_4X4_F *perspective_transform) {
    return This->lpVtbl->DrawBitmap(This,bitmap,dst_rect,opacity,interpolation_mode,src_rect,perspective_transform);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_DrawImage(ID2D1CommandSink4* This,ID2D1Image *image,const D2D1_POINT_2F *target_offset,const D2D1_RECT_F *image_rect,D2D1_INTERPOLATION_MODE interpolation_mode,D2D1_COMPOSITE_MODE composite_mode) {
    return This->lpVtbl->DrawImage(This,image,target_offset,image_rect,interpolation_mode,composite_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_FillMesh(ID2D1CommandSink4* This,ID2D1Mesh *mesh,ID2D1Brush *brush) {
    return This->lpVtbl->FillMesh(This,mesh,brush);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_FillOpacityMask(ID2D1CommandSink4* This,ID2D1Bitmap *bitmap,ID2D1Brush *brush,const D2D1_RECT_F *dst_rect,const D2D1_RECT_F *src_rect) {
    return This->lpVtbl->FillOpacityMask(This,bitmap,brush,dst_rect,src_rect);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_FillGeometry(ID2D1CommandSink4* This,ID2D1Geometry *geometry,ID2D1Brush *brush,ID2D1Brush *opacity_brush) {
    return This->lpVtbl->FillGeometry(This,geometry,brush,opacity_brush);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_FillRectangle(ID2D1CommandSink4* This,const D2D1_RECT_F *rect,ID2D1Brush *brush) {
    return This->lpVtbl->FillRectangle(This,rect,brush);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_PushAxisAlignedClip(ID2D1CommandSink4* This,const D2D1_RECT_F *clip_rect,D2D1_ANTIALIAS_MODE antialias_mode) {
    return This->lpVtbl->PushAxisAlignedClip(This,clip_rect,antialias_mode);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_PushLayer(ID2D1CommandSink4* This,const D2D1_LAYER_PARAMETERS1 *layer_parameters,ID2D1Layer *layer) {
    return This->lpVtbl->PushLayer(This,layer_parameters,layer);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_PopAxisAlignedClip(ID2D1CommandSink4* This) {
    return This->lpVtbl->PopAxisAlignedClip(This);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_PopLayer(ID2D1CommandSink4* This) {
    return This->lpVtbl->PopLayer(This);
}
/*** ID2D1CommandSink1 methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink4_SetPrimitiveBlend1(ID2D1CommandSink4* This,D2D1_PRIMITIVE_BLEND primitive_blend) {
    return This->lpVtbl->SetPrimitiveBlend1(This,primitive_blend);
}
/*** ID2D1CommandSink2 methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink4_DrawInk(ID2D1CommandSink4* This,ID2D1Ink *ink,ID2D1Brush *brush,ID2D1InkStyle *ink_style) {
    return This->lpVtbl->DrawInk(This,ink,brush,ink_style);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_DrawGradientMesh(ID2D1CommandSink4* This,ID2D1GradientMesh *gradient_mesh) {
    return This->lpVtbl->DrawGradientMesh(This,gradient_mesh);
}
static __WIDL_INLINE HRESULT ID2D1CommandSink4_DrawGdiMetafile(ID2D1CommandSink4* This,ID2D1GdiMetafile *gdi_metafile,const D2D1_RECT_F *dest_rect,const D2D1_RECT_F *src_rect) {
    return This->lpVtbl->ID2D1CommandSink2_DrawGdiMetafile(This,gdi_metafile,dest_rect,src_rect);
}
/*** ID2D1CommandSink3 methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink4_DrawSpriteBatch(ID2D1CommandSink4* This,ID2D1SpriteBatch *sprite_batch,UINT32 start_index,UINT32 sprite_count,ID2D1Bitmap *bitmap,D2D1_BITMAP_INTERPOLATION_MODE interpolation_mode,D2D1_SPRITE_OPTIONS sprite_options) {
    return This->lpVtbl->DrawSpriteBatch(This,sprite_batch,start_index,sprite_count,bitmap,interpolation_mode,sprite_options);
}
/*** ID2D1CommandSink4 methods ***/
static __WIDL_INLINE HRESULT ID2D1CommandSink4_SetPrimitiveBlend2(ID2D1CommandSink4* This,D2D1_PRIMITIVE_BLEND primitive_blend) {
    return This->lpVtbl->SetPrimitiveBlend2(This,primitive_blend);
}
#endif
#endif

#endif


#endif  /* __ID2D1CommandSink4_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __d2d1_3_h__ */
