#!/bin/bash
LOGMODE=LOCAL
logg()
{
        # level emerg alert crit err warn notice info debug
        [ "$2" = "debug" ] && [ "$DEBUG" = "0" ] && return 0
        echo $SHELLOPTS | grep -Fq xtrace && set +x && local trace=1
        local dt=$(date)
        local logcontent="$1"
        local level=info
        [ -n "$2" ] && level=$2
        #[ "$2" = "warn" ] || [ "$2" = "err" ] || [ "$2" = "crit" ] && warn "$logcontent"
        [ "$QUIET" = 0 ] && echo "[$dt]|[$$]|[$level]|(${FUNCNAME[*]})|$logcontent" 1>&2 || true
        case $LOGMODE in
                LOCAL)
                        echo "[$dt]|[$$]|[$level]|(${FUNCNAME[*]})|$logcontent" 1>&2 || true
                ;;
                REMOTE)
                        echo "[$dt]|[$$]|[$level]|(${FUNCNAME[*]})|$logcontent" 1>&2 || true
                        logger -d -n $LOGSERVER -t $MYNAME -P 514 -p local5."$level" "(${FUNCNAME[*]})" "$logcontent"
                ;;
                SYSTEMD)
                        echo "[$dt]|[$$]|[$level]|(${FUNCNAME[*]})|$logcontent" || true
                ;;
        esac
        if [ "$2" = "emerg" ] ; then
                local cnt=0
                while [ "$cnt" -lt 4 ] ; do
                        echo "[$$]|[$level]|(${FUNCNAME[*]})|$logcontent" | wall
                        ((cnt++))
                done
        fi
        [ "$trace" = 1 ] && set -x
        return 0
}

sleep()
{
        local time=$1
        [ -x /usr/bin/sleep ] || exit
        /usr/bin/sleep "$time" & wait $!
}

getwebass()
{	
	logg "getting ass file" debug
	ASSFILE="$(find "${ASSDIR}" -name "${SRC}*${INDEX}*${LANGG}.ass")"
	ASSFILE="${ASSFILE:-"$(find "${ASSDIR}" -name "${PROJECT}*${INDEX}*${LANGG}.ass")"}"
	if [ -z "$ASSFILE" ] ; then
		logg "cannot find assfile $SRC / $PROJECT $INDEX $LANGG" err
		exit 11
	else 
		logg "using ass $ASSFILE" info
	fi
}

getwebavs()
{
	local mode="$1" #X264 or X265
	[[ "$mode" =~ 264 ]] && mode=264
	[[ "$mode" =~ 265 ]] && mode=265
	AVSFILE="$(find "${SCDIR}" -name "${PROJECT}*${INDEX}*${LANGG}*${RESO}*${mode}.avs"|tail -n 1)"
        if [ -f "$AVSFILE" ] ; then
                logg "using $AVSFILE" info
        elif [ "$Automissingavs" = "1" ] ; then
		createavs
		#createavs "$PROJECT" "${INDEX}" "${LANGG}" "${RESO}" ${mode}
	else
                logg "${PROJECT}_${INDEX}_${LANGG}_${RESO}_264.avs not exist" err
                exit 7
        fi
	if [ "$mode" = 265 ] && ! grep -q -e 'depth=10' -e 'bits=10' -e "[Dd]own10" "$AVSFILE" ; then
		logg "Warning: 10bit output not found in $AVSFILE" warn
	fi
}

getwebscript()
{
	[ "$#" != "2" ] && logg "usage: getwebscript 264/265 AVS/VS"
	local code="$1" #X264 or X265
	[[ "$code" =~ 264 ]] && code=264
	[[ "$code" =~ 265 ]] && code=265
	local mode="$2" #avs or vpy
	ISCRIPT="$(find "${SCDIR}" -name "${PROJECT}*${INDEX}*${LANGG}*${RESO}*${code}.${mode}"|tail -n 1)"
        if [ -f "$ISCRIPT" ] ; then
                logg "using $ISCRIPT" info
        elif [ "$Automissingscript" = "1" ] ; then
		case $mode in 
		avs)
		createavs
		#createavs "$PROJECT" "${INDEX}" "${LANGG}" "${RESO}" ${code}
		;;
		vpy)
		createvpy
		;;
		esac
	else
                logg "${PROJECT}_${INDEX}_${LANGG}_${RESO}_${code}.${mode} not exist" err
                exit 7
        fi
	if [ "$code" = 265 ] && ! grep -q -e 'depth=10' -e 'bits=10' -e "[Dd]own10" "$ISCRIPT" ; then
		logg "Warning: 10bit output not found in $ISCRIPT" warn
	fi
	if [ "$MODE" = vpy ] && ! grep -q -e 'set_ouput(1)' ; then
		logg "Warning: vpy seems do not have an audio ouput at stream 1" warn
	fi
}

getwebsrcinfo()
{
	#Potential parse error here
	VideoFmt="$($MEDIAINFO_exec --Output="Video;%Format%" "${SRCFILE}")"
	Videorate="$($MEDIAINFO_exec --Output="Video;%Bitrate%" "${SRCFILE}")"
	Videorate="${Videorate:-$($MEDIAINFO_exec --Output="Video;%FromStats_BitRate%" "${SRCFILE}")}"
	AudioFmt="$($MEDIAINFO_exec --Output="Audio;%Format%" "${SRCFILE}")"
	Audiorate="$($MEDIAINFO_exec --Output="Audio;%Bitrate%" "${SRCFILE}")"
	Audiorate="${Audiorate:-$($MEDIAINFO_exec --Output="Audio;%FromStats_BitRate%" "${SRCFILE}")}"
	logg "${SRCFILE} VideoFormat $VideoFmt Bitrate $Videorate AudioFormat $AudioFmt Bitrate $Audiorate" info
}

getwebsrc()
{
        SRCFILE="$(find "${SRCDIR}" -name "*${SRC}*${INDEX}*"|grep -v lwi|head -n 1)"
        if [ -n "$SRCFILE" ] ; then
                logg "find src file ${SRCFILE}" info
        else
                logg "cannot file $SRC $INDEX source file" err
                exit 9
        fi
}

createavs()
{	
	ISCRIPT="${SCDIR}/${PROJECT}_${INDEX}_${LANGG}_${RESO}_${code}.${mode}"
	logg "create avs script for ${PROJECT} ${INDEX} ${LANGG} ${RESO} ${code} ${mode}" info
	getwebass
	local SRCFILE_s="${SRCFILE##*/}"
	local FONTDIR_s="${FONTDIR##*/}"
	local ASSFILE_s="${ASSFILE##*/}"
	logg "font dir is $FONTDIR , relative dir is $FONTDIR_s" debug
	if [ "$X265_EN" = "1" ] ; then
		[ -n "${AVS265TMPL}" ] && AVSTMPL="${AVS265TMPL}"
	fi
	sed "s|__ENCROOT__|${ENCROOT}|; s|__SRCFILE__|../src/${SRCFILE_s}|; s|__ASSFILE__|../ass/${ASSFILE_s}|; s|__FONTDIR__|../${FONTDIR_s}|" "${ENCROOT}/config/${AVSTMPL}" > "$ISCRIPT"
	if [ "$X265_EN" = "1" ] && ! grep -q 'output_depth=10' "$ISCRIPT" && [ -z "$AVS265TMPL" ] && [ "$Automissingdepth" = "1" ] ; then
		#specified AVS265TMPL unconditionally skip this part
		#Assume last line is Return
		logg "Warning: x265 mode without 10bit out in script template?" warn
	fi
	if [[ "$RESO" =~ 720 ]] && ! grep -q '1280,720' "$ISCRIPT" ; then
		logg "Adding resize to 1280x720" info
		sed -i '$s/$/.Spline36Resize(1280,720)/' "$ISCRIPT"
	fi
}

createvpy()
{	
	ISCRIPT="${SCDIR}/${PROJECT}_${INDEX}_${LANGG}_${RESO}_${code}.${mode}"
	logg "create avs script for ${PROJECT} ${INDEX} ${LANGG} ${RESO} ${code} ${mode}" info
	getwebass
	local SRCFILE_s="${SRCFILE##*/}"
	local FONTDIR_s="${FONTDIR##*/}"
	local ASSFILE_s="${ASSFILE##*/}"
	logg "font dir is $FONTDIR , relative dir is $FONTDIR_s" debug
	if [ "$X265_EN" = "1" ] ; then
		[ -n "${VS265TMPL}" ] && VSTMPL="${VS265TMPL}"
	fi
	sed "s|__ENCROOT__|${ENCROOT}|; s|__SRCFILE__|../src/${SRCFILE_s}|; s|__ASSFILE__|../ass/${ASSFILE_s}|; s|__FONTDIR__|../${FONTDIR_s}|" "${ENCROOT}/config/${VSTMPL}" > "$ISCRIPT"
	#output0 -> v ouput1 -> a
	if ! grep -iq 'AudioSource' ; then
		logg "Adding audio part to vpy as output 1" info
		echo "aud=core.bs.AudioSource(\'../src/${SRCFILE_s}\')" >> "$ISCRIPT"
		echo "aud.set_output(1)" >> "$ISCRIPT"
	fi
	#auto resize to 720 if not in template
	if [[ "$RESO" =~ 720 ]] && ! grep -q '"out.*1280.*720"' "$ISCRIPT" ; then
		logg "Adding resize to 1280x720" info
		sed -i 's/set_output(0*)/resize.Spline64(1280,720).set_output(0)/' "$ISCRIPT"
	fi
}

getvpyinfo()
{
	logg "get vpy info" info
	if ! [ -x "$(which vspipe)" ] ; then
		logg "vspipe not found or no exec perm" err
		exit 8
	fi
	# get stream 0 
	if vspipe --info "$ISCRIPT" -o 0 > ${ISCRIPT}.vinfo ; then
		while read l ; do
			set -- $l
			case "$1" in
			Width:)
				VPY_RESO="${2}x"
			;;
			Height:)
				#W x H
				VPY_RESO="${VPY_RESO}${2}"
			;;
			Frames:)
				VPY_FC="$2"
			;;
			FPS:)
				VPY_FPS="$2"
			;;
			Format)
				VPY_FMT="$3"
			;;
			Bits:)
				VPY_BIT="$2"
			;;
			esac
		done < "${ISCRIPT}.vinfo"
		logg "${ISCRIPT}: Reso $VPY_RESO Frames $VPY_FC at $VPY_FPS Format $VPY_FMT Depth $VPY_BIT" info
			
	else
		logg "cannot get $ISCRIPT stream 0 info " err
		exit 11
	fi
	if vspipe --info "$ISCRIPT" -o 1 > ${ISCRIPT}.ainfo ; then
		while read l ; do
			set -- $l
			case "$1" in
			Samples:)
				VPY_ASMP="$2"
			Sample)
				VPY_ASRT="$3"
			Format)
				VPY_AFMT="$3"
			Bits:)
				VPY_ABIT="$2"
			Channels:)
				VPY_ACHN="$2"
			esac
		done < "${ISCRIPT}.vinfo"
	else
		logg "Cannot get audio from $ISCRIPT stream 1, try fallback to source file" err
		VPY_AFallback=1
	fi
}

localtmp()
{
	sleep 1 #TODO /tmp
}


cleanuptmp()
{
	if [ "$Cleartmp" != "0" ] ; then
		logg "cleanup tmpfiles" info
	else
		logg "Will Not clean tmp" info
		return 0
	fi
	local rmed=""
	if [ "$DRYRUN" = 0 ] ; then
		[ "$X264_EN" = "1" ] && rmed="$X264_TMP $X264_AUD_TMP" && rm -f "$X264_TMP" "$X264_AUD_TMP"
		[ "$X265_EN" = "1" ] && rmed="$X265_TMP $X265_AUD_TMP" && rm -f "$X265_TMP" "$X265_AUD_TMP"
		rm -f "$rmed"
		logg "rm -f $rmed" info
	else 
		[ "$X264_EN" = "1" ] && rmed="$X264_TMP $X264_AUD_TMP"
		[ "$X265_EN" = "1" ] && rmed="$X265_TMP $X265_AUD_TMP"
		logg "rm -f $rmed" info
	fi
}

updatevsconfig()
{
	logg "update vs config" debug
	echo "UserPluginDir=$ENCROOT/deps/vs-plugins" > $VS_CONFIG
	echo "SystemPluginDir=$ENCROOT/deps/vs-plugins" >> $VS_CONFIG
}
